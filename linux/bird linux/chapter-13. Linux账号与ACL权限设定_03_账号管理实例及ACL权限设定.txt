1、账号管理实例
	账号管理不是随意建置几个账号，有时候我们需要考虑到一部主机上面可能有多个账号在协同工作
	1）使用者pro1, pro2, pro3是同一个项目计划的开发人员，我想要让这三个用户在同一个目录底下工作， 但这三个用户还是拥有自己的家目录与基本的私有群组。假设我要让这个项目计划在/srv/projecta目录下开发，可以如何进行？
		1. 假设这三个账号都尚未建立，可先建立一个名为projecta的群组，再让这三个用户加入其次要群组的支持即可
			$ groupadd projecta
			$ useradd -G projecta -c "projecta user" pro1
			$ useradd -G projecta -c "projecta user" pro2
			$ useradd -G projecta -c "projecta user" pro3
			$ echo "password" | passwd --stdin pro1
			$ echo "password" | passwd --stdin pro2
			$ echo "password" | passwd --stdin pro3
		2. 开始建立此项目的开发目录
			$ mkdir /srv/projecta
			$ chgrp projecta /srv/projecta
			$ chmod 2770 /srv/projecta
			$ ll -d /srv/projecta
2、假如myuser1是projecta 这个项目的助理，他需要读这个项目的内容，但是他『不可以修改』项目目录内的任何数据
	1）将myuser1 加入projecta 这个群组的支持，但是这样会让myuser1 具有完整的/srv/projecta 的权限，myuser1 是可以删除该目录下的任何数据的！这样是有问题的
	2）将/srv/projecta 的权限改为2775 ，让myuser1 可以进入查阅数据。但此时会发生所有其他人均可进入该目录查阅的困扰！ 这也不是我们要的环境
	3）传统的 Linux 权限可以针对某个个人设定专属的权限，及ACL
3、主机的细部权限规划：ACL 的使用
	我们就一直强调Linux 的权限概念非常重要。但是传统的权限仅有三种身份(owner, group, others) 搭配三种权限(r,w,x) 而已，并没有办法单纯的针对某一个使用者或某一个群组来设定特定的权限需求，2中的需求，此时就得要使用 ACL机制。
	1）什么是ACL
		ACL 是Access Control List 的缩写，主要的目的是在提供传统的owner,group,others 的read,write,execute 权限之外的细部权限设定。ACL 可以针对单一使用者，单一文件或目录来进行r,w,x 的权限规范，对于需要特殊权限的使用状况非常有帮助。
		主要可以针对几个项目：
			使用者(user)：可以针对使用者来设定权限；
			群组(group)：针对群组为对象来设定其权限；
			默认属性(mask)：还可以针对在该目录下在建立新文件/目录时，规范新数据的默认权限；
		也就是说，如果你有一个目录，需要给一堆人使用，每个人或每个群组所需要的权限并不相同时，传统的Linux 三种身份的三种权限是无法达到的，因为基本上，传统的 Linux 权限只能针对一个用户、一个群组及非此群组的其他人设定权限而已，无法针对单一用户或个人来设计权限。而ACL就是为了要改变这个问题。
	2）如何启动ACL
		事实上，原本ACL是unix-like操作系统的额外支持项目，但因为近年以来Linux 系统对权限细部设定的热切需求，因此目前ACL几乎已经预设加入在所有常见的Linux 文件系统的挂载参数中(ext2/ext3/ext4/xfs 等等)！所以你无须进行任何动作，不过，如果你不放心系统是否真的有支持ACL 的话，那么就来检查一下核心挂载时显示的信息
			$ dmesg | grep -i acl
	3）ACL 的设定技巧
		1. setfacl [-bkRd] [{-m|-x} acl 参数] 目标文件名
			1-选项与参数：
				-m ：设定后续的 acl 参数给文件使用，不可与 -x 合用；
				-x ：删除后续的 acl 参数，不可与 -m 合用；
				-b ：移除『所有的』 ACL 设定参数；
				-k ：移除『预设的』 ACL 参数，关于所谓的『预设』参数于后续范例中介绍；
				-R ：递归设定 acl ，亦即包括次目录都会被设定起来；
				-d ：设定『预设 acl 参数』的意思！只对目录有效，在该目录新建的数据会引用此默认值
			2-针对特定使用者的方式：
				设定规范：『 u:[使用者账号列表]:[rwx] 』，例如针对 user1的权限规范 rx：
					eg：$ setfacl -m u:user1:rx acl_file
						权限部分会多个+
						如果u后面的用户为空，则代表设定文件拥有者
		2. 上述动作为最简单的ACL设定，利用『u:使用者:权限』的方式来设定。如果一个文件设定了ACL 参数后，他的权限部分就会多出一个+ 号了。此时你看到的权限与实际权限可能就会有点误差，观察可以透过getfacl
			getfacl filename
			1-选项与参数：
				getfacl 的选项几乎与setfacl相同,这里就免去了说明
			2-说明：
				显示结果中，显示的数据前面加上# 的，代表这个文件的默认属性，包括文件名、文件拥有者与文件所属群组。底下出现的 user, group, mask, other 则是属于不同使用者、群组与有效权限(mask)的设定值。
		3. 针对特定群组的方式：
			1-设定规范：『 g:[群组列表]:[rwx] 』，例如针对 mygroup1 的权限规范 rx ：
				$ setfacl -m g:mygroup1:rx acl_file
		4. 针对有效权限设定：『m:权限』
			基本上，群组与使用者的设定并没有什么太大的差异。不过，mask 是什么。其实他有点像是『有效权限』。使用者或群组所设定的权限必须要存在于 mask 的权限设定范围内才会生效，此即『有效权限(effective permission)』,我们可以透过使用mask 来规范最大允许的权限，
			1-针对有效权限 mask 的设定方式
				设定规范：『 m:[rwx] 』：
					$ setfacl -m m:r acl_file
					$ getfacl acl_test1
		5. 如果一个文件夹下设定好acl权限，在acl中重新创建文件，这个文件是无法继承acl权限的，解决方式：
			1-使用默认权限设定目录未来文件的ACL 权限继承『d:[u|g]:[user|group]:权限』
				1.针对预设权限的设定方式：
					设定规范：『 d:[ug]:使用者列表:[rwx] 』
						$ setfacl -m d:u:user1:rx /srv/projecta   # 让user1 在 /srv/projecta 底下一直具有 rx 的预设权限
							透过这个『针对目录来设定的默认ACL 权限设定值』的项目，我们可以让这些属性继承。如果想要让ACL 的属性全部消失又要如何处理？透过『setfacl -b 檔名』即可
			2-eg:
				针对/srv/projecta目录,我需要取消user1的设定(连同默认值)，以及让pro3这个用户在该目录下无任何权限:
					$ setfacl -x u:myuser1 /srv/projecta
					$ setfacl -x d:u:myuser1 /srv/projecta
					$ setfacl -m u:pro3:- /srv/projecta
						设定一个用户/群组没有任何权限的ACL语法中，在权限的字段不可留白，而是应该加上一个减号(-)
					