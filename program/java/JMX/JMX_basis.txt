1-JMX（Java Management Extensions，即Java管理扩展）是一个为应用程序、设备、系统等植入管理功能的框架。JMX可以跨越一系列异构操作系统平台、系统体系结构和网络传输协议，灵活的开发无缝集成的系统、网络和服务管理应用。这种机制可以方便的管理、监控正在运行中的Java程序。常用于管理线程，内存，日志Level，服务重启，系统环境等。
2-基本术语
	1、MBean：是Managed Bean的简称，可以翻译为“管理构件”。在JMX中MBean代表一个被管理的资源实例，通过MBean中暴露的方法和属性，外界可以获取被管理的资源的状态和操纵MBean的行为。事实上，MBean就是一个Java Object，同JavaBean模型一样，外界使用自醒和反射来获取Object的值和调用Object的方法，只是MBean更为复杂和高级一些。MBean通过公共方法以及遵从特定的设计模式封装了属性和操作，以便暴露给管理应用程序。例如，一个只读属性在管理构件中只有Get方法，既有Get又有Set方法表示是一个可读写的属性。一共有四种类型的MBean: Standard MBean, Dynamic MBean, Open MBean, Model MBean。
	2、MBeanServer：MBean生存在一个MBeanServer中。MBeanServer管理这些MBean，并且代理外界对它们的访问。并且MBeanServer提供了一种注册机制，是的外界可以通过名字来得到相应的MBean实例。
	3、JMX Agent：Agent只是一个Java进程，它包括这个MBeanServer和一系列附加的MbeanService。当然这些Service也是通过MBean的形式来发布。
	4、Protocol Adapters and Connectors：MBeanServer依赖于Protocol Adapters和Connectors来和运行该代理的|Java虚拟机之外的|管理应用程序进行通信。Protocol Adapters通过特定的协议提供了一张注册在MBeanServer的MBean的视图。例如，一个HTML Adapter可以将所有注册过的MBean显示在Web 页面上。不同的协议，提供不同的视图。Connectors还必须提供管理应用一方的接口以使代理和管理应用程序进行通信，即针对不同的协议，Connectors必须提供同样的远程接口来封装通信过程。当远程应用程序使用这个接口时，就可以通过网络透明的和代理进行交互，而忽略协议本身。Adapters和Connectors使MBean服务器与管理应用程序能进行通信。因此，一个代理要被管理，它必须提供至少一个Protocol Adapter或者Connector。面临多种管理应用时，代理可以包含各种不同的Protocol Adapters和Connectors。当前已经实现和将要实现的Protocol Adapters和Connectors包括： RMI Connector, SNMP Adapter, IIOP Adapter, HTML Adapter, HTTP Connector.
		------>Adapter 和Connector的区别在于：Adapter是使用某种Internet协议来与JMX Agent获得联系，Agent端会有一个对象 (Adapter)来处理有关协议的细节。比如SNMP Adapter和HTTP Adapter。而Connector则是使用类似RPC的方式来访问Agent，在Agent端和客户端都必须有这样一个对象来处理相应的请求与应答。比如RMI Connector。
		------>JMX Agent可以带有任意多个Adapter，因此可以使用多种不同的方式访问Agent。
3-JMX基本构架,见图JMX基本结构.png、JMX基本结构_1.png
	JMX分为三层，分别负责处理不同的事务。它们分别是：
		nstrumentation 层 
			Instrumentation层主要包括了一系列的接口定义和描述如何开发MBean的规范。通常JMX所管理的资源有一个或多个MBean组成，因此这个资源可以是任何由Java语言开发的组件，或是一个JavaWrapper包装的其他语言开发的资源。
			MBean分为如下四种，我接下来主要介绍standard MBean
				standard MBean
					这种类型的MBean最简单，它能管理的资源（包括属性，方法，时间）必须定义在接口中，然后MBean必须实现这个接口。它的命名也必须遵循一定的规范，例如我们的MBean为Hello，则接口必须为HelloMBean。
				dynamic MBean
					必须实现javax.management.DynamicMBean接口，所有的属性，方法都在运行时定义
				open MBean
					此MBean的规范还不完善，正在改进中
				model MBean
					与标准和动态MBean相比，你可以不用写MBean类，只需使用javax.management.modelmbean.RequiredModelMBean即可。RequiredModelMBean实现了ModelMBean接口，而ModelMBean扩展了DynamicMBean接口，因此与DynamicMBean相似，Model MBean的管理资源也是在运行时定义的。与DynamicMBean不同的是，DynamicMBean管理的资源一般定义在DynamicMBean中（运行时才决定管理那些资源），而model MBean管理的资源并不在MBean中，而是在外部（通常是一个类），只有在运行时，才通过set方法将其加入到model MBean中。
		Agent 层 
			Agent 用来管理相应的资源，并且为远端用户提供访问的接口。Agent层构建在Intrumentation层之上，并且使用并管理 Instrumentation层内部描述的组件。Agent层主要定义了各种服务以及通信模型。该层的核心是一MBeanServer,所有的MBean都要向它注册，才能被管理。注册在MBeanServer上的MBean并不直接和远程应用程序进行通信，他们通过协议适配器（Adapter）和连接器（Connector）进行通信。通常Agent由一个MBeanServer和多个系统服务组成。JMX Agent并不关心它所管理的资源是什么。
		Distributed 层 
			Distributed层关心Agent如何被远端用户访问的细节。它定义了一系列用来访问Agent的接口和组件，包括Adapter和Connector的描述。
	PS.如果一个Java对象可以由一个遵循JMX规范的管理器应用管理，那么这个Java对象就可以由JMX管理资源。要使一个Java对象可管理，则必须创建相应的MBean对象，并通过这些MBean对象管理相应的Java对象。当拥有MBean类后，需要将其实例化并注册到MBeanServer上。
4-JDK7中已经包含了jmx，但是如果用到HtmlAdaptorServer类（后面会看到）还需要用到jmxtools.jar, 可以去这里下载，有两个包：jmx-1_2_1-ri.zip； jmx_remote-1_0_1_03-ri.zip。jmx-1_2_1-ri.zip解压后lib中有jmxri.jar和jmxtools.jar,将jmxtool.jar拷贝出来放入classpath中即可（jmxri.jar在JDK5+已经包被包含了）。
5-Standard MBean
	Standard MBean的设计和实现是最简单的，它们的管理接口通过方法名来描述。Standard MBean的实现依靠一组命名规则，称之为设计模式。这些命名规则定义了属性和操作。检查Standard MBean接口和应用设计模式的过程被称为内省（Introspection）。JMX代理通过内省来查看每一个注册在MBeanServer上的MBean的方法和超类，看它是否遵从一定设计模式，决定它是否代表了一个MBean，并辨认出它的属性和操作。Standard MBean是JMX管理构件中最简单的一种，只需要开发一个MBean接口（为了实现Standard MBean，必须遵循一套继承规范。必须每一个MBean定义一个接口，而且这个接口的名字必须是其被管理的资源的对象类的名称后面加上”MBean”），一个实现MBean接口的类，并且把它们注册到MBeanServer中就可以了。
		public interface HelloMBean {
		     public String getName();
		     public void setName(String name);
		     public String getAge();
		     public void setAge(String age);
		     public void helloWorld();
		     public void helloWorld(String str);
		     public void getTelephone();
		}
	接下来是真正的资源对象，因为命名规范的限制，因此对象名称必须为Hello
		public class Hello implements HelloMBean {
		    private String name;
		    private String age;
		    public void getTelephone()
		    {
		        System.out.println("get Telephone");
		    }
		    public void helloWorld()
		    {
		        System.out.println("hello world");
		    }
		    public void helloWorld(String str)
		    {
		        System.out.println("helloWorld:" + str);
		    }
		    public String getName()
		    {
		        System.out.println("get name:" + name);
		        return name;
		    }
		    public void setName(String name)
		    {
		        System.out.println("set name...");
		        this.name = name;
		    }
		    public String getAge()
		    {
		        System.out.println("get age:" + age);
		        return age;
		    }
		    public void setAge(String age)
		    {
		        System.out.println("set age");
		        this.age = age;
		    }      
		}
	创建Agent类
		1、JDK的小工具Jconsole访问
			public class HelloAgent {
			    public static void main(String[] args) throws JMException, Exception
			    {
			         MBeanServer server = ManagementFactory.getPlatformMBeanServer();//通过工厂类获取MBeanServer，用来做MBean的容器
			         //ObjectName中的取名是有一定规范的，格式为：“域名：name=MBean名称”
			         	//	其中域名和MBean的名称可以任意取。这样定义后，就可以唯一标识我们定义的这个MBean的实现类了。
			         ObjectName helloName = new ObjectName("jmx:name=hello");
			         //create mbean and register mbean
			         server.registerMBean(new Hello(), helloName);//将Hello这个类注入到MBeanServer中，注入需要创建一个ObjectName类
			         Thread.sleep(60*60*1000);
			    }
			}
		运行cmd->jconsole->本地进程->jmx.HelloAgent
			连接之后查看MBean标签即可看到jmx下包含的hello的MBean。
		2、通过JMX提供的工具页访问
			复用上面的接口和实现类，只需要改动适配层，这里需要到导入外部jar包jdmk
				public class HelloAgent {
				    public static void main(String[] args) throws JMException, Exception
				    {
				         MBeanServer server = ManagementFactory.getPlatformMBeanServer();
				         ObjectName helloName = new ObjectName("jmx:name=hello");
				         //create mbean and register mbean
				         server.registerMBean(new Hello(), helloName);
				         
				         ObjectName adapterName = new ObjectName("HelloAgent:name=htmladapter,port=8082");   
				         HtmlAdaptorServer adapter = new HtmlAdaptorServer();   
				         server.registerMBean(adapter, adapterName);  
				         adapter.start();
				    }
				}
			访问地址：http://localhost:8082，点击name=hello
				1、在这里创建一个AdaptorServer，这个类将决定MBean的管理界面，这里用最普通的Html型界面。AdaptorServer其实也是一个MBean。 
				2、我们可以看到这个工具页，其实与我们上一个案例中的Jconsole中的管理界面类似，都可以操作资源中的属性和方法。
		3、通过客户端程序进行远程访问
			这里需要对agent进行修改，增加ip和port绑定部分的逻辑
				public class HelloAgent {
				    public static void main(String[] args) throws JMException, Exception
				    {
				         MBeanServer server = ManagementFactory.getPlatformMBeanServer();
						ObjectName helloName = new ObjectName("jmxBean:name=hello");
						// create mbean and register mbean
						server.registerMBean(new Hello(), helloName);
						try {
							// 这个步骤很重要，注册一个端口，绑定url后用于客户端通过rmi方式连接JMXConnectorServer
							LocateRegistry.createRegistry(9999);
							// URL路径的结尾可以随意指定，但如果需要用Jconsole来进行连接，则必须使用jmxrmi
							JMXServiceURL url = new JMXServiceURL("service:jmx:rmi:///jndi/rmi://localhost:9999/jmxrmi");
							JMXConnectorServer jcs = JMXConnectorServerFactory.newJMXConnectorServer(url, null, server);
							System.out.println("begin rmi start");
							jcs.start();
							System.out.println("rmi start");
						} catch (RemoteException e) {
							e.printStackTrace();
						} catch (IOException e) {
							e.printStackTrace();
						}
				    }
				}
			1=此时，没有client进行远程连接，可以远程使用Jconsole进行远程访问
				localhost:9999
				service:jmx:rmi:///jndi/rmi://localhost:9999/jmxrmi
			2=客户端Client程序，用于与agent进行远程连接
				public class Client {
					public static void main(String[] args) throws IOException, Exception, NullPointerException {
						JMXServiceURL url = new JMXServiceURL("service:jmx:rmi:///jndi/rmi://localhost:9999/jmxrmi");
						JMXConnector jmxc = JMXConnectorFactory.connect(url, null);
						MBeanServerConnection mbsc = jmxc.getMBeanServerConnection();
						// ObjectName的名称与前面注册时候的保持一致
						ObjectName mbeanName = new ObjectName("jmxBean:name=hello");
						System.out.println("Domains ......");
						String[] domains = mbsc.getDomains();
						for (int i = 0; i < domains.length; i++) {
							System.out.println("doumain[" + i + "]=" + domains[i]);
						}
						System.out.println("MBean count = " + mbsc.getMBeanCount());

						//对资源里面的方法进行操作有两种方式：一是通过代理直接调用方法；二是通过JAVA的反射注入的方式进行方法的调用。
						// 设置指定Mbean的特定属性值
						// 这里的setAttribute、getAttribute操作只能针对bean的属性
						// 例如对getName或者setName进行操作，只能使用Name，需要去除方法的前缀
						mbsc.setAttribute(mbeanName, new Attribute("Name", "杭州"));//对属性进行赋值和取值，这里我们不能直接调用方法，而是通过setAttribute、getAttrubute方法来进行操作，则属性的首字母要大写。
						mbsc.setAttribute(mbeanName, new Attribute("Age", "1990"));
						String age = (String) mbsc.getAttribute(mbeanName, "Age");
						String name = (String) mbsc.getAttribute(mbeanName, "Name");
						System.out.println("age=" + age + ";name=" + name);
						HelloMBean proxy = MBeanServerInvocationHandler.newProxyInstance(mbsc, mbeanName, HelloMBean.class, false);
						proxy.helloWorld();
						proxy.helloWorld("migu");
						proxy.getTelephone();
						// invoke调用bean的方法，只针对非设置属性的方法
						// 例如invoke不能对getName方法进行调用
						mbsc.invoke(mbeanName, "getTelephone", null, null);
						mbsc.invoke(mbeanName, "helloWorld", new String[] { "I'll connect to JMX Server via client2" },
								new String[] { "java.lang.String" });
						mbsc.invoke(mbeanName, "helloWorld", null, null);
					}
				}
6-Notification
	MBean之间的通信是必不可少的，Notification就起到了在MBean之间沟通桥梁的作用。JMX 的通知由四部分组成：
		1、Notification这个相当于一个信息包，封装了需要传递的信息
		2、Notification broadcaster这个相当于一个广播器，把消息广播出。
		3、Notification listener 这是一个监听器，用于监听广播出来的通知信息。
		4、Notification filiter 这个一个过滤器，过滤掉不需要的通知。这个一般很少使用。
	这里我们使用日常打招呼的场景：jack与我偶遇，jack说：hi；我礼貌的回答：hello，jack。
	这里我们先分别创建两个资源：
		1、public interface HelloMBean {
			public String getName();
			public void setName(String name);
			public void printHello();
			public void printHello(String whoName);
			public void returnHello(String message);
		}
		2、public class Hello extends NotificationBroadcasterSupport implements HelloMBean
		{
			private int seq = 0;
		    private String name;
		    public String getName()
		    {
		        return name;
		    }
		    public void setName(String name)
		    {
		        this.name = name;
		    }
		    public void printHello()
		    {
		        System.out.println("Hello World, " + name);
		    }
		    public void printHello(String whoName)
		    {
		        System.out.println("Hello , " + whoName);
		    }
			public void returnHello(String message) {
				Notification notify = 
			            //通知名称；谁发起的通知；序列号；发起通知时间；发送的消息
			            new Notification("jack.hi",this,++seq,System.currentTimeMillis(),"hi,hello");
			        sendNotification(notify);
			}
		}
		3、public interface JackMBean
		{
		    public void hi();
		    public void println(String message);
		}
		4、public class Jack extends NotificationBroadcasterSupport implements JackMBean
		{
		    private int seq = 0;
		    public void hi()
		    {
		         //创建一个信息包
		        Notification notify = 
		            //通知名称；谁发起的通知；序列号；发起通知时间；发送的消息
		            new Notification("jack.hi",this,++seq,System.currentTimeMillis(),"hi,hello");
		        sendNotification(notify);
		    }
			public void println(String message) {
				System.out.println(message);
			}
		}
		5、public class HelloListener implements NotificationListener
		{

		    public void handleNotification(Notification notification, Object handback)
		    {
		        if(handback instanceof Hello)
		        {
		            Hello hello = (Hello)handback;
		            hello.printHello("Hello receive message: " + notification.getMessage());
		            hello.returnHello("hi,jack");
		        }
		    }
		    
		}
		6、public class JackListener implements NotificationListener
		{

		    public void handleNotification(Notification notification, Object handback)
		    {
		        if(handback instanceof Jack)
		        {
		        	Jack jack = (Jack)handback;
		        	jack.println("Jack receive message: " + notification.getMessage());
		        }
		    }
		    
		}
		7、public class HelloAgent {
			public static void main(String[] args) throws JMException, Exception {
				 MBeanServer server = ManagementFactory.getPlatformMBeanServer();
				 ObjectName helloName = new ObjectName("yunge:name=Hello");
				 Hello hello=new Hello();
				 server.registerMBean(hello, helloName);
				 Jack jack = new Jack();
				 server.registerMBean(jack, new ObjectName("jack:name=Jack"));
				 jack.addNotificationListener(new HelloListener(), null, hello);
				 hello.addNotificationListener(new JackListener(), null, jack);
				 Thread.sleep(500000);
			}
		}
7、更多请查看工程
	JMXTest.zip





