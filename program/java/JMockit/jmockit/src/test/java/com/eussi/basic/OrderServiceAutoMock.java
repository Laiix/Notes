package com.eussi.basic;

import java.lang.reflect.Field;
import java.lang.reflect.Modifier;
import java.util.Map;
import mockit.Deencapsulation;
import mockit.Mock;
import mockit.MockUp;

/**
 * Generated by UTGenerator Plugin on 2020/10/18 14:40.
 */
public class OrderServiceAutoMock {

    //Mock constructor of test class OrderService, should be called before instantiation.
    static class ConstructorMock {
        static void mockMailService() {
            new MockUp<OrderService>() {
                @Mock
                public void $init(MailService mailService) {

                }
            };
        }

    }

    /**
     * Creates a new instance of a given class, with any instance fields left uninitialized,
     * if the given class is abstract or an interface, then a concrete class is created, with
     * empty implementations for its methods.
     */
    static <T> T getMockInstance(Class<? extends T> clazz) {
        return Deencapsulation.newUninitializedInstance(clazz);
    }

    //Sets the value of a non-accessible field on a given object.
    static void setField(Object objectWithField, String fieldName, Object fieldValue) {
        Deencapsulation.setField(objectWithField, fieldName, fieldValue);
    }

    //Sets the value of a non-accessible static field on a given class.
    static void setStaticField(Class<?> classWithStaticField, String fieldName, Object fieldValue) throws Exception {
        Field field = classWithStaticField.getDeclaredField(fieldName);
        field.setAccessible(true);
        if (Modifier.isFinal(field.getModifiers())) {
            Field modifiersField = Field.class.getDeclaredField("modifiers");
            modifiersField.setAccessible(true);
            modifiersField.setInt(field, field.getModifiers() & ~Modifier.FINAL);
        }
        field.set(null, fieldValue);
    }

    //Gets the value of a non-accessible field from a given object.
    static <T> T getField(Object objectWithField, String fieldName) {
        return Deencapsulation.getField(objectWithField, fieldName);
    }

    //Gets the value of a non-accessible static field defined in a given class.
    static <T> T getStaticField(Class<?> classWithStaticField, String fieldName) {
        return Deencapsulation.getField(classWithStaticField, fieldName);
    }

    /**
     * Dependency mock code of test method {@link OrderService#submitOrder}
     */
    static class SubmitOrderMock {
        static <T extends UserCheckService> void mockUserCheckService(final Map<Integer, Boolean> checkMockValue) {
            new MockUp<T>() {
                int checkCount = 0;
                boolean lastCheckMockValue;

                @Mock
                public boolean check(long param0) {
                    boolean result = lastCheckMockValue;
                    if (checkMockValue.containsKey(checkCount)) {
                        result = checkMockValue.get(checkCount);
                        lastCheckMockValue = result;
                    }
                    checkCount++;
                    return result;
                }

            };
        }

        static <T extends MailService> void mockMailService(final Map<Integer, Boolean> sendMailMockValue) {
            new MockUp<T>() {
                int sendMailCount = 0;
                boolean lastSendMailMockValue;

                @Mock
                public boolean sendMail(long param0, String param1) {
                    boolean result = lastSendMailMockValue;
                    if (sendMailMockValue.containsKey(sendMailCount)) {
                        result = sendMailMockValue.get(sendMailCount);
                        lastSendMailMockValue = result;
                    }
                    sendMailCount++;
                    return result;
                }

            };
        }

    }

}