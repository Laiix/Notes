1、对于开发者而言，每种日志都有不同的写法。如果我们以实际的日志框架来进行编写，代码就限制死了，之后就很难再更换日志系统，很难做到无缝切换。
	java web开发就经常提到一项原则：面向接口编程，而不是面向实现编程
	所以我们应该是按照一套统一的API来进行日志编程，实际的日志框架来实现这套API，这样的话，即使更换日志框架，也可以做到无缝切换。
	这就是commons-logging与slf4j的初衷。
	下面就来介绍下commons-logging与slf4j这两个门面如何与上述四个实际的日志框架进行集成的呢
	介绍之前先说明下日志简称：
		jdk自带的logging->简称 jul (java-util-logging)
		apache commons-logging->简称 jcl
2、apache commons-logging
	1-简单的使用案例
		private static Log logger=LogFactory.getLog(JulJclTest.class);
		public static void main(String[] args){
			if(logger.isTraceEnabled()){
				logger.trace("commons-logging-jcl trace message");
			}
			if(logger.isDebugEnabled()){
				logger.debug("commons-logging-jcl debug message");
			}
			if(logger.isInfoEnabled()){
				logger.info("commons-logging-jcl info message");
			}
		}
	上述Log、LogFactory都是commons-logging自己的接口和类
	2-使用原理
		LogFactory.getLog(JulJclTest.class)的源码如下：
			public static Log getLog(Class clazz) throws LogConfigurationException {
				return getFactory().getInstance(clazz);
			}
		上述获取Log的过程大致分成2个阶段：
			获取LogFactory的过程 (从字面上理解就是生产Log的工厂)
			根据LogFactory获取Log的过程
		commons-logging默认提供的LogFactory实现：LogFactoryImpl commons-logging默认提供的Log实现：Jdk14Logger、Log4JLogger、SimpleLog。
		下面来详细说明：
			1）获取LogFactory的过程
				从下面几种途径来获取LogFactory
				1.1 系统属性中获取，即如下形式
					System.getProperty("org.apache.commons.logging.LogFactory")
				1.2 使用java的SPI机制，来搜寻对应的实现
					对于java的SPI机制，详细内容可以自行搜索，这里不再说明。搜寻路径如下：
						META-INF/services/org.apache.commons.logging.LogFactory
					简单来说就是搜寻哪些jar包中含有搜寻含有上述文件，该文件中指明了对应的LogFactory实现
				1.3 从commons-logging的配置文件中寻找
					commons-logging也是可以拥有自己的配置文件的，名字为commons-logging.properties，只不过目前大多数情况下，我们都没有去使用它。如果使用了该配置文件，尝试从配置文件中读取属性"org.apache.commons.logging.LogFactory"对应的值

				1.4 最后还没找到的话，使用默认的org.apache.commons.logging.impl.LogFactoryImpl
					LogFactoryImpl是commons-logging提供的默认实现
			2）根据LogFactory获取Log的过程
				这时候就需要寻找底层是选用哪种类型的日志
				就以commons-logging提供的默认实现为例，来详细看下这个过程：
				2.1 从commons-logging的配置文件中寻找Log实现类的类名
					从commons-logging.properties配置文件中寻找属性为"org.apache.commons.logging.Log"对应的Log类名
				2.2 从系统属性中寻找Log实现类的类名
					即如下方式获取：
						System.getProperty("org.apache.commons.logging.Log")
				2.3 如果上述方式没找到，则从classesToDiscover属性中寻找
					classesToDiscover属性值如下：
						private static final String[] classesToDiscover = {
							"org.apache.commons.logging.impl.Log4JLogger",
							"org.apache.commons.logging.impl.Jdk14Logger",
							"org.apache.commons.logging.impl.Jdk13LumberjackLogger",
							"org.apache.commons.logging.impl.SimpleLog"
						};
					它会尝试根据上述类名，依次进行创建，如果能创建成功，则使用该Log，然后返回给用户。
3、下面针对具体的日志框架，看看commons-logging是如何集成的
	1-commons-logging与jul集成
		1）需要的jar包
			commons-logging
			对应的maven依赖是：
				<dependency>
					<groupId>commons-logging</groupId>
					<artifactId>commons-logging</artifactId>
					<version>1.2</version>
				</dependency>
		2）使用案例
			private static Log logger=LogFactory.getLog(JulJclTest.class);
			public static void main(String[] args){
				if(logger.isTraceEnabled()){
					logger.trace("commons-logging-jcl trace message");
				}
				if(logger.isDebugEnabled()){
					logger.debug("commons-logging-jcl debug message");
				}
				if(logger.isInfoEnabled()){
					logger.info("commons-logging-jcl info message");
				}
			}
			结果输出如下：
				四月 27, 2015 11:13:33 下午 com.demo.log4j.JulJclTest main
				信息: commons-logging-jcl info message
			