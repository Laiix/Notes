package com.eussi.basic;

import java.util.*;

import mockit.Injectable;
import mockit.Tested;
import mockit.integration.junit4.JMockit;
import org.junit.*;
import org.junit.runner.RunWith;
import static org.junit.Assert.*;

/**
 * Generated by UTGenerator Plugin on 2020/10/18 14:40.
 */
@RunWith(JMockit.class)
public class OrderServiceAutoTest extends OrderServiceAutoMock {

    @BeforeClass
    public static void setUpClass() {
        //operation before all tests
    }

    @AfterClass
    public static void tearDownClass() {
        //operation after all tests
    }

    //test class instance, can be reused
    @Tested
    private OrderService testInstance;
    @Injectable
    MailService mailService;
    @Injectable
    UserCheckService userCheckService;


    @Before
    public void setUp() {
        //operation before each test
        testInstance = new OrderService(mailService);
    }

    @After
    public void tearDown() {
        //operation after each test
    }

    @Test
    public void testSubmitOrder() {
        //TODO: review the generated mock code, modify the given mock values
        //mock all dependencies of method OrderService#submitOrder
        //mock class UserCheckService
        boolean z = false;
        Map<Integer, Boolean> checkMockValue = new HashMap<>();
        checkMockValue.put(0, z);
        SubmitOrderMock.mockUserCheckService(checkMockValue);

        //mock class MailService
        boolean z1 = false;
        Map<Integer, Boolean> sendMailMockValue = new HashMap<>();
        sendMailMockValue.put(0, z1);
        SubmitOrderMock.mockMailService(sendMailMockValue);

        //TODO: review the generated test code, modify the given method call arguments and assert clause
        //prepare arguments and call the test method
        long buyerId = 0L;
        long itemId = 0L;

        boolean actualResult = testInstance.submitOrder(buyerId, itemId);
        assertFalse(actualResult);
    }

}