1-Semaphore
	1）Semaphore可以维护当前访问自身线程的个数，并提供了同步机制。使用Semaphore可以控制同时访问资源的线程个数，例如，实现一个文件的并发访问数。
		例：
			import java.util.concurrent.ExecutorService;
			import java.util.concurrent.Executors;
			import java.util.concurrent.Semaphore;

			public class SemaphoreTest {
				public static void main(String[] args) {
					ExecutorService service = Executors.newCachedThreadPool();
					final  Semaphore sp = new Semaphore(3);//重载方法添加fair参数，决定是否先到的线程可以先获得信号量
					for(int i=0;i<10;i++){
						Runnable runnable = new Runnable(){
								public void run(){
								try {
									sp.acquire();
								} catch (InterruptedException e1) {
									e1.printStackTrace();
								}
								System.out.println("线程" + Thread.currentThread().getName() + 
										"进入，当前已有" + (3-sp.availablePermits()) + "个并发");
								try {
									Thread.sleep((long)(Math.random()*10000));
								} catch (InterruptedException e) {
									e.printStackTrace();
								}
								System.out.println("线程" + Thread.currentThread().getName() + 
										"即将离开");					
								sp.release();
								//下面代码有时候执行不准确，因为其没有和上面的代码合成原子单元
								System.out.println("线程" + Thread.currentThread().getName() + 
										"已离开，当前已有" + (3-sp.availablePermits()) + "个并发");					
							}
						};
						service.execute(runnable);			
					}
				}

			}
	2）单个信号量的Semaphore对象可以实现互斥锁的功能，并且可以是由一个线程获得锁，在由另一线程释放锁，这可以用于一些死锁恢复的场合。
2-CyclicBarrier
	表示大家彼此等待，大家集合号才出发，分散活动后又在指定地点集合碰面。
		例：
			import java.util.concurrent.CyclicBarrier;
			import java.util.concurrent.ExecutorService;
			import java.util.concurrent.Executors;

			public class CyclicBarrierTest {

				public static void main(String[] args) {
					ExecutorService service = Executors.newCachedThreadPool();
					final  CyclicBarrier cb = new CyclicBarrier(3);
					for(int i=0;i<3;i++){
						Runnable runnable = new Runnable(){
								public void run(){
								try {
									Thread.sleep((long)(Math.random()*10000));	
									System.out.println("线程" + Thread.currentThread().getName() + 
											"即将到达集合地点1，当前已有" + (cb.getNumberWaiting()+1) + "个已经到达，" + (cb.getNumberWaiting()==2?"都到齐了，继续走啊":"正在等候"));						
									cb.await();
									
									Thread.sleep((long)(Math.random()*10000));	
									System.out.println("线程" + Thread.currentThread().getName() + 
											"即将到达集合地点2，当前已有" + (cb.getNumberWaiting()+1) + "个已经到达，" + (cb.getNumberWaiting()==2?"都到齐了，继续走啊":"正在等候"));
									cb.await();	
									Thread.sleep((long)(Math.random()*10000));	
									System.out.println("线程" + Thread.currentThread().getName() + 
											"即将到达集合地点3，当前已有" + (cb.getNumberWaiting() + 1) + "个已经到达，" + (cb.getNumberWaiting()==2?"都到齐了，继续走啊":"正在等候"));						
									cb.await();						
								} catch (Exception e) {
									e.printStackTrace();
								}				
							}
						};
						service.execute(runnable);
					}
					service.shutdown();
				}
			}
3-CountdownLatch
	犹如倒计时计数器，调用CountDownLatch对象的CountDown方法就将计数器减一，当计数器到达0时，则所有等待者或单个等待者开始执行。
	例：
		import java.util.concurrent.CountDownLatch;
		import java.util.concurrent.CyclicBarrier;
		import java.util.concurrent.ExecutorService;
		import java.util.concurrent.Executors;

		public class CountdownLatchTest {

			public static void main(String[] args) {
				ExecutorService service = Executors.newCachedThreadPool();
				final CountDownLatch cdOrder = new CountDownLatch(1);
				final CountDownLatch cdAnswer = new CountDownLatch(3);
				for(int i=0;i<3;i++){
					Runnable runnable = new Runnable(){
						public void run(){
							try {
								System.out.println("线程" + Thread.currentThread().getName() +
										"正准备接受命令");
								cdOrder.await();
								System.out.println("线程" + Thread.currentThread().getName() +
										"已接受命令");
								Thread.sleep((long)(Math.random()*10000));
								System.out.println("线程" + Thread.currentThread().getName() +
										"回应命令处理结果");
								cdAnswer.countDown();
							} catch (Exception e) {
								e.printStackTrace();
							}
						}
					};
					service.execute(runnable);
				}
				try {
					Thread.sleep((long)(Math.random()*10000));

					System.out.println("线程" + Thread.currentThread().getName() +
							"即将发布命令");
					cdOrder.countDown();
					System.out.println("线程" + Thread.currentThread().getName() +
							"已发送命令，正在等待结果");
					cdAnswer.await();
					System.out.println("线程" + Thread.currentThread().getName() +
							"已收到所有响应结果");
				} catch (Exception e) {
					e.printStackTrace();
				}
				service.shutdown();

			}
		}
4-Exchanger
	用于实现两个人之间的数据交换，每个人在完成一定的事务后想与对方交换数据，第一个先拿出数据的人将一直等待第二个人拿着数据到来时，才能彼此交换的数据。
	例；
		import java.util.concurrent.Exchanger;
		import java.util.concurrent.ExecutorService;
		import java.util.concurrent.Executors;

		public class ExchangerTest {

			public static void main(String[] args) {
				ExecutorService service = Executors.newCachedThreadPool();
				final Exchanger exchanger = new Exchanger();
				service.execute(new Runnable(){
					public void run() {
						try {

							String data1 = "zxx";
							System.out.println("线程" + Thread.currentThread().getName() +
									"正在把数据" + data1 +"换出去");
							Thread.sleep((long)(Math.random()*10000));
							String data2 = (String)exchanger.exchange(data1);
							System.out.println("线程" + Thread.currentThread().getName() +
									"换回的数据为" + data2);
						}catch(Exception e){

						}
					}
				});
				service.execute(new Runnable(){
					public void run() {
						try {

							String data1 = "lhm";
							System.out.println("线程" + Thread.currentThread().getName() +
									"正在把数据" + data1 +"换出去");
							Thread.sleep((long)(Math.random()*10000));
							String data2 = (String)exchanger.exchange(data1);
							System.out.println("线程" + Thread.currentThread().getName() +
									"换回的数据为" + data2);
						}catch(Exception e){

						}
					}
				});
			}
		}



