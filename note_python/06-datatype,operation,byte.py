# wangxueming
print("变量：")
##########################################################################################################
'''
1-数字
    2 是一个整数的例子。
    长整数 范围更大的整数。
    3.23和52.3E-4是浮点数的例子。E标记表示10的幂。在这里，52.3E-4表示52.3 * 10-4。
    (-5+4j)和(2.3-4.6j)是复数的例子，其中-5,4为实数，j为虚数，数学中表示复数是什么？。
int（整型）
　　在32位机器上，整数的位数为32位，取值范围为-2**31～2**31-1，即-2147483648～2147483647
　　在64位系统上，整数的位数为64位，取值范围为-2**63～2**63-1，即-9223372036854775808～9223372036854775807
long（长整型）
　　跟C语言不同，Python的长整数没有指定位宽，即：Python没有限制长整数数值的大小，但实际上由于机器内存有限，我
    们使用的长整数数值不可能无限大。
　　注意，自从Python2.2起，如果整数发生溢出，Python会自动将整数数据转换为长整数，所以如今在长整数数据后面不加
    字母L也不会导致严重后果了。 python3已经没有long的概念了
float（浮点型）
　　浮点数用来处理实数，即带有小数的数字。类似于C语言中的double类型，占8个字节（64位），其中52位表示底，11位表示指数，剩下的一位表示符号。
complex（复数）
　　复数由实数部分和虚数部分组成，一般形式为x＋yj，其中的x是复数的实数部分，y是复数的虚数部分，这里的x和y都是实数。
注：Python中存在小数字池：-5 ～ 257
2-布尔值
　　真或假
　　1 或 0 True 或 False
3-万恶的字符串拼接：
　　python中的字符串在C语言中体现为是一个字符数组，每次创建字符串时候需要在内存中开辟一块连续的空，并且一旦需要修
改字符串的话，就需要再次开辟空间，万恶的+号每出现一次就会在内从中重新开辟一块空间。
4-列表
5-元组（不可变列表）
6-字典
'''
######################################################################################################################
# python运算：
'''
Python算术运算符
以下假设变量： a=10，b=20：
运算符	描述                                        	实例
+	    加 - 两个对象相加	                            a + b 输出结果 30
-	    减 - 得到负数或是一个数减去另一个数	            a - b 输出结果 -10
*	    乘 - 两个数相乘或是返回一个被重复若干次的字符串	a * b 输出结果 200
/	    除 - x除以y	                                    b / a 输出结果 2
%	    取模 - 返回除法的余数	                        b % a 输出结果 0
**	    幂 - 返回x的y次幂	                            a**b 为10的20次方， 输出结果 100000000000000000000
//	    取整除 - 返回商的整数部分	                    9//2 输出结果 4 , 9.0//2.0 输出结果 4.0
以下实例演示了Python所有算术运算符的操作：
'''
a = 21
b = 10
c = 0
c = a + b
print("1 - c 的值为：", c)
c = a - b
print("2 - c 的值为：", c)
c = a * b
print("3 - c 的值为：", c)
c = a / b                     # 注意：Python2.x 里，整数除整数，只能得出整数。如果要得到小数部分，把其中一个数改成浮点数即可
print("4 - c 的值为：", c)
c = a % b
print("5 - c 的值为：", c)
# 修改变量 a 、b 、c
a = 2
b = 3
c = a ** b
print("6 - c 的值为：", c)
a = 10
b = 5
c = a // b
print("7 - c 的值为：", c)
'''
Python比较运算符
以下假设变量a为10，变量b为20：

运算符	描述                                                    	实例
==	    等于 - 比较对象是否相等	                                    (a == b) 返回 False。
!=	    不等于 - 比较两个对象是否不相等	                            (a != b) 返回 true.
<>	    不等于 - 比较两个对象是否不相等（python不支持）	            (a <> b) 返回 true。这个运算符类似 != 。
>	    大于 - 返回x是否大于y	                                    (a > b) 返回 False。
<	    小于 - 返回x是否小于y。所有比较运算符返回1表示真，返回0表   (a < b) 返回 true。
        示假。这分别与特殊的变量True和False等价。	                                                                
>=	    大于等于	- 返回x是否大于等于y。	                         (a >= b) 返回 False。
<=	    小于等于 -	返回x是否小于等于y。	                         (a <= b) 返回 true。

Python赋值运算符
以下假设变量a为10，变量b为20：
运算符	 描述                     	实例
=	     简单的赋值运算符	        c = a + b 将 a + b 的运算结果赋值为 c
+=	     加法赋值运算符	            c += a 等效于 c = c + a
-=	     减法赋值运算符	            c -= a 等效于 c = c - a
*=	     乘法赋值运算符	            c *= a 等效于 c = c * a
/=	     除法赋值运算符 	        c /= a 等效于 c = c / a
%=	     取模赋值运算符	            c %= a 等效于 c = c % a
**=	     幂赋值运算符	            c **= a 等效于 c = c ** a
//=	     取整除赋值运算符	        c //= a 等效于 c = c // a

Python位运算符
按位运算符是把数字看作二进制来进行计算的。Python中的按位运算法则如下：
下表中变量 a 为 60，b 为 13，二进制格式如下：
a = 0011 1100
b = 0000 1101
-----------------
a&b = 0000 1100
a|b = 0011 1101
a^b = 0011 0001
~a  = 1100 0011
运算符	描述                                                     实例
&	    按位与运算符：参与运算的两个值,如果两个相应位都为1,
        则该位的结果为1,否则为0	                                 (a & b) 输出结果 12 ，二进制解释： 0000 1100
|	    按位或运算符：只要对应的二个二进位有一个为1时，结果位就
        为1。	                                                 (a | b) 输出结果 61 ，二进制解释： 0011 1101
^	    按位异或运算符：当两对应的二进位相异时，结果为1	         (a ^ b) 输出结果 49 ，二进制解释： 0011 0001
~	    按位取反运算符：对数据的每个二进制位取反,即把1变为0,把0
        变为1 。~x 类似于 -x-1	                                 (~a ) 输出结果 -61 ，二进制解释： 1100 0011，在一个有符号二进制数的补码形式。
<<	    左移动运算符：运算数的各二进位全部左移若干位，由 << 右边
        的数字指定了移动的位数，高位丢弃，低位补0。	              a << 2 输出结果 240 ，二进制解释： 1111 0000
>>	    右移动运算符：把">>"左边的运算数的各二进位全部右移若干位，
        >> 右边的数字指定了移动的位数	                          a >> 2 输出结果 15 ，二进制解释： 0000 1111
        
Python逻辑运算符
Python语言支持逻辑运算符，以下假设变量 a 为 10, b为 20:
运算符	逻辑表达式	描述	                                                                     实例
and	    x and y	    布尔"与" - 如果 x 为 False，x and y 返回 False，否则它返回 y 的计算值。	    (a and b) 返回 20。
or	    x or y	    布尔"或"	- 如果 x 是非 0，它返回 x 的值，否则它返回 y 的计算值。	        (a or b) 返回 10。
not	    not x	    布尔"非" - 如果 x 为 True，返回 False 。如果 x 为 False，它返回 True。	     not(a and b) 返回 False
'''
a = 1
if not (a == 2):              # 这几种形式测试都可以
    print("a不等于2")
if not a == 2:
    print("a不等于2")
if (not a == 2):
    print("a不等于2")
if (not (a == 2)):
    print("a不等于2")
'''
python成员运算符
除了以上的一些运算符之外，python还支持成员运算符，测试实例中包含了一系列的成员，包括字符串，列表或元组。
运算符	描述  	                                                实例
in	    如果在指定的序列中找到值返回 true，否则返回 false。	    x 在 y 序列中 , 如果 x 在 y 序列中返回 true。
not in	如果在指定的序列中没有找到值返回 true，否则返回 false。	x 不在 y 序列中 , 如果 x 不在 y 序列中返回 true。
'''
a = 1
num_list = [1, 2, 3, 4, 5]
if a in num_list:
    print("变量 a 在给定的列表中 list 中")
else:
    print("变量 a 不在给定的列表中 list 中")
'''
Python身份运算符
身份运算符用于比较两个对象的存储单元
运算符	描述                                      	 实例
is	    is 是判断两个标识符是不是引用自一个对象	     x is y, 类似 id(x) == id(y) , 如果引用的是同一个对象
                                                     则返回 True，否则返回 False
is not	is not 是判断两个标识符是不是引用自不同对象	 x is not y ， 类似 id(a) != id(b)。如果引用的不是同一
                                                    个对象则返回结果 True，否则返回 False。
注： id() 函数用于获取对象内存地址

is 与 == 区别：
is 用于判断两个变量引用对象是否为同一个， == 用于判断引用变量的值是否相等。
>>> a = [1, 2, 3]
>>> b = a
>>> b is a 
True
>>> b == a
True
>>> b = a[:]
>>> b is a
False
>>> b == a
True

Python运算符优先级
以下表格列出了从最高到最低优先级的所有运算符：
运算符	                  描述
**	                      指数 (最高优先级)
~ + -	                  按位翻转, 一元加号和减号 (最后两个的方法名为 +@ 和 -@)
* / % //	              乘，除，取模和取整除
+ -	                      加法减法
>> <<	                  右移，左移运算符
&	                      位 'AND'
^ |	                      位运算符
<= < > >=	              比较运算符
<> == !=	              等于运算符
= %= /= //= -= += *= **=  赋值运算符
is is not	              身份运算符
in not in	              成员运算符
not or and	              逻辑运算符
'''
##############################################################################################
# 三元运算
# result = 值1 if 条件 else 值2
b = 1
c = 20 if b == 1 else 10
print("c的值:", c)
###############################################################################################
'''
python 3中最重要的新特性可能就是将文本(text)和二进制数据做了更清晰的区分。文本总是用unicode进行编码，
以str类型表示；而二进制数据以bytes类型表示。
在python3中，不能以任何隐式方式将str和bytes类型二者混合使用。不可以将str和bytes类型进行拼接，不能在
str中搜索bytes数据(反之亦然)，也不能将str作为参数传入需要bytes类型参数的函数(反之亦然)。
'''
msg = "测试编码转换"
byteMsg = msg.encode("utf-8")
print("字节：", byteMsg)
print("UTF-8，字符串：", byteMsg.decode("utf-8"))
print("iso-8859-1，字符串：", byteMsg.decode("iso-8859-1"))

