1、Linux账号和群组
	Linux 到底是如何辨别每一个使用者
	1）使用者标识符：UID与GID
		1-登入 Linux 主机时，输入的是我们的账号，但是其实Linux 主机并不会直接认识输入的账号，而是仅仅认识数字ID，账号和ID的对应在/etc/passwd文件中，例如：网上下载一个tarball类型文件，他的用户可能是一串奇怪的数字，因为passwd文件中未找到相应的账号名称
		2-使用者登录系统至少会取得两个ID：UID（User ID）、GID（Group ID）
		3-文件同样是通过他拥有UID和GID依据/etc/passwd和/etc/group中的内容来显示用户账号和组名的
	2）使用者账号
		1-我们输入账号密码后，系统操作如下步骤：
			1.先找寻/etc/passwd 里面是否有你输入的账号？如果没有则跳出，如果有的话则将该账号对应的UID与GID(在/etc/group中)读出来，另外，该账号的家目录与shell设定也一并读出
			2.再来则是核对密码表啦！这时Linux会进入/etc/shadow里面找出对应的账号与UID，然后核对一下你刚刚输入的密码与里头的密码是否相符？
			3.如果一切都OK 的话，就进入Shell 控管的阶段啰
			
			ps. 登入linux主机的时候，/etc/passwd和/etc/shadow就必须让系统读取（很多攻击者会将特殊账号写到passwd文件中），所以备份Linux的系统的账号的话，这两个文件一定要备份，这两个文件详情可以参考man 5 passwd 及 man 5 shadow
		2-/etc/passwd文件结构
			1.每一行都代表一个账号，有几行就代表有几个账号在你的系统中！ 不过需要特别留意的是，里头很多账号本来就是系统正常运作所必须要的，我们可以简称他为系统账号，例如 bin, daemon, adm, nobody等等，这些账号请不要随意的杀掉
			2.每一行通过[:]分隔为七列，分别代表：
				a-账号名称
				b-密码
					早期Unix系统的密码就是放在该字段，但是这个文件的特性是所有的程序都能够读取，很容易造成密码数据被窃取， 所以密码数据放到/etc/shadow 中了，所这里你只会看到一个[x]
				c-UID
					使用者标识符,Linux对于UID有以下几个限制：
						0(系统管理员)
							当 UID 是 0 时，代表这个账号是[系统管理员]。 所以当你要让其他的账号名称也具有root 的权限时，将该账号的 UID 改为 0 即可。这也就是说，一部系统上面的系统管理员不见得只有 root。不过，很不建议有多个账号的UID是0，容易让系统管理员混乱。
						1~999(系统账号)
							1.保留给系统使用的ID，其实除了 0 之外，其他的UID权限与特性并没有不一样。默认 1000以下的数字让给系统作为保留账号只是一个习惯。
							2.由于系统上面启动的网络服务或背景服务希望使用较小的权限去运作，因此不希望使用root的身份去执行这些服务，所以我们就得要提供这些运行中程序的拥有者账号才行。这些系统账号通常是不可登入的，所以才会有我们在第十章提到的/sbin/nologin 这个特殊的 shell 存在。
							3.根据系统账号的由来，通常这类账号又大概被区分为两种：
								1~200：由distributions自行建立的系统账号；
								201~999：若用户有系统账号需求时，可以使用的账号UID。
						1000~60000(可登入账号)
							给一般使用者用的。事实上，目前的 linux 核心(3.10.x 版)UID已经可以支持到4294967295(2^32-1)
				d-GID
					这个与/etc/group有关,其实/etc/group的观念与/etc/passwd差不多，只是他是用来规范组名与GID的对应而已
				e-用户信息说明栏
					这个字段基本上并没有什么重要用途，只是用来解释这个账号的意义而已！不过，使用finger 的功能时，这个字段可以提供很多的讯息,后面的chfn指令会来解释这里的说明。
				f-家目录
					这是用户的家目录，root的家目录在/root，所以当root 登入之后，就会立刻跑到/root目录里头。如果你有个账号的使用空间特别的大，你想要将该账号的家目录移动到其他的硬盘去，可以在这个字段进行修改，默认的用户家目录在/home/yourIDname
				g-Shell
					当用户登入系统后就会取得一个Shell来与系统的核心沟通以进行用户的操作任务。用户预设shell 会使用bash。就是在这个字段指定。这里比较需要注意的是，有一个shell 可以用来替代成让账号无法取得shell 环境的登入动作，那就是/sbin/nologin，它可以用来制作纯pop邮件账号者的数据。
		3-/etc/shadow文件结构
			1.程序的运作都与权限有关，而权限与UID/GID有关，各程序当然需要读取/etc/passwd来了解不同账号的权限。因此/etc/passwd 的权限需设定为-rw-r--r--，虽然早期的密码也有加密过，但却放置到/etc/passwd的第二个字段上，这样一来很容易被有心人士所窃取， 加密过的密码也能够透过暴力破解法去trial and error(试误)找出来。所以后来发展出将密码移动到/etc/shadow 这个文件分隔开来的技术，而且还加入很多的密码限制参数在/etc/shadow里头
			2.每一行通过[:]分隔为九列，分别代表：
				a-账号名称
				b-密码
					经过加密的密码。这样加密密码很难被破解，但是不等于不会被破解，所以此文件预设权限是-rw-------或----------，即只要root可以读写。
					另外，由于各种加密方式不一样，加密后的字段长度不相同。举例来说，以前的DES, MD5编码系统产生的密码长度就与目前惯用的SHA端些。由于固定的加密方式产生的密码长度必须一致，因此，当你让这个字段的长度改变后，该密码就会失效。很多软件透过这个功能，在此字段前加上! 或*改变密码字段长度，就会让密码暂时失效。
				c-最近更动密码的日期
					这个字段记录更改密码的日期，不过，这个字段是计算Linux日期的时间是以1970年1月1日作为1 而累加的日期，想要知道某个日期的累积日数， 可使用如下的程序计算：
						echo $(($(date --date="2018/08/15" +%s)/86400+1))
				d-密码不可被更动的天数
					这个账号的密码在最近一次被更改后需要经过几天才可以再被变更。如果是0的话，表示密码随时可以更动的意思。这的限制是为了防止某些人一改再改密码。提示“You must wait longer to change your password”
				e-密码需要重新变更的天数
					为强制要求用户变更密码，这个字段可以指定在最近一次更改密码后,在多少天数内需要再次的变更密码才行。必须要在这个天数内重新设定密码，否则这个账号的密码将会变为过期状态。而如果像99999(计算为273年)的话，那就表示，密码的变更没有强制性之意。
				f-密码需要变更期限前的警告天数(与第5字段相比)
					当账号的密码有效期限快要到的时候(第5字段)，系统会依据这个字段的设定，提示“Warning: your password will expire in * days”
				g-密码过期后的账号宽限时间(密码失效日)(与第5字段相比)
					密码有效日期为更新日期(第3字段)+新变更日期(第5 字段)，过了该期限后用户依旧没有更新密码，那该密码就算过期了。虽然密码过期但是该账号还是可以用来进行其他工作的，包括登入系统取得bash。不过如果密码过期了，当你登入系统时，系统会强制要求你必须要重新设定密码才能登入继续使用，这就是密码过期。提示“You are required to change your password immediately (password aged)”
					在密码过期几天后，如果使用者还是没有登入更改密码，那么这个账号的密码将会失效，亦即该账号再也无法使用该密码登入
				h-账号失效日期
					这个日期跟第三个字段一样，都是使用1970年以来的总日数设定。这个字段表示： 这个账号在此字段规定的日期之后，将无法再使用。就是所谓的账号失效,此时不论你的密码是否有过期，这个账号都不能再被使用，提示“Your account has expired; please contact your system administrator”。这个字段会被使用通常应该是在收费服务的系统中，规定一个日期让该账号不能再使用
				i-保留字段
			3.密码忘记了怎么办？
				一般用户
					这个最容易解决，请系统管理员帮忙，重新设定好你的密码而不需要知道旧密码，利用root 的身份使用passwd指令来处理即可。
				root用户
				    因为无法使用root身份登入，但root的密码在/etc/shadow当中，因此可以使用各种可行的方法开机进入Linux再去修改。
					例如：
						1=重新启动进入单人维护模式(第十九章)后，系统会主动的给予root权限的bash接口，此时再以passwd修改密码即可；
						2=或以Live CD开机后挂载根目录去修改/etc/shadow，将里面的root的密码字段清空，再重新启动后root将不用密码即可登入。登入后再赶快以passwd指令去设定root密码即可
			4.获取密码加密方式
				authconfig --test | grep hashing
	3）关于群组：有效与初始群组和groups, newgrp
		1-/etc/group文件结构
			1.每一行都代表一个群组，通过冒号分隔，共四列，分别代表：
				a-组名
				b-群组密码
					通常不需要设定，这个设定通常给群组管理员使用，目前很少会设定群组管理员。同样，密码已经移动到/etc/gshadow 中，因此这个字段只存在一个x
				c-GID
					/etc/passwd第四个字段使用的GID对应的群组名，由这里关联出来
				d-此群组支持的账号名称
					一个账号可以加入多个群组，那某个账号想要加入此群组时，将该账号填入这个字段即可。举例来说，如果我想要让dmtsai 与alex加入root这个群组，第一行的最后面加上dmtsai,alex，注意不要有空格，即root:x:0:dmtsai,alex
			2.有效群组(effective group)与初始群组(initial group)
				a-/etc/group第四栏可以有多个用户，也就是一个用户可以加入多个群组，那么该用户需要以一个群组为主群组，如果一个用户初始群组是某一个群组，该用户不用将用户名写入/etc/group第四个字段
				b-/etc/passwd里面的第四栏的GID 就是初始群组(initial group)即：用户一登入系统，立刻就拥有这个群组的相关权限的意思
				c-使用者登录后，输入groups可以查看支持群组，输出的数据中第一个输出的即是有效群组，创建文件使用的是有效群组
				d-使用newgrp groupname 可以切换用户有效群组，但是后面接的群组名需要是自己支持的群组，需要注意，使用newgrp，是在原本的shell中有开启了一个子shell，离开这个newgrp环境，记得使用exit退出。
		2-/etc/gshadow
			1.用来建立群组管理员，root用户忙碌时，当有使用者想要加入某些群组时，该群组的群组管理员就能够将那个账号加入自己管理的群组中！不过，由于目前有类似sudo之类的工具，群组管理员的功能已很少使用。操作具体见gpasswd介绍。这个文件内容通过冒号分隔
				a-组名
				b-密码栏，同样的，开头为!表示无合法密码，表示无群组管理员
				c-群组管理员的账号
				c-有加入该群组支持的所属账号号(与/etc/group 内容相同！)
2、账号管理
	1）新增与移除使用者： useradd, 相关配置文件, passwd, usermod, userdel
		1. useradd [-u UID] [-g 初始群组] [-G 次要群组] [-mM] [-c 说明栏] [-d 家目录绝对路径] [-s shell] 使用者账号名
			1-选项与参数：
				-u ：后面接的是UID，是一组数字。直接指定一个特定的 UID 给这个账号
				-g ：后面接的那个组名initial group，该群组的GID会被放置到/etc/passwd的第四个字段内。
				-G ：后面接的组名则是这个账号还可以加入的群组。这个选项与参数会修改 /etc/group 内的相关资料
				-M ：强制！不要建立用户家目录！(系统账号默认值)
				-m ：强制！要建立用户家目录！(一般账号默认值)
				-c ：这个就是 /etc/passwd 的第五栏的说明内容，可以随便设定
				-d ：指定某个目录成为家目录，而不要使用默认值。务必使用绝对路径！
				-r ：建立一个系统的账号，这个账号的 UID 会有限制 (参考 /etc/login.defs)
				-s ：后面接一个 shell ，若没有指定则预设是 /bin/bash
				-e ：后面接一个日期，格式为『YYYY-MM-DD』此项目可写入 shadow 第八字段，即账号失效日的设定
				-f ：后面接 shadow 的第七字段项目，指定密码是否会失效。0 为立刻失效，-1 为永远不失效(密码只会过期而强制于登入时重新设定而已。)
			2-eg:
				创建一个用户：
					$ useradd username
						默认会建立用户家目录，且权限为 700,系统已经帮我们规定好非常多的默认值，一般仅使用以上例子添加用户即可:
							在/etc/passwd 里面建立一行与账号相关的数据，包括建立UID/GID/家目录等；
							在/etc/shadow 里面将此账号的密码相关参数填入，但是尚未有密码；还需要使用passwd username 来给予密码完成用户建立
							在/etc/group 里面加入一个与账号名称一模一样的组名；
							在/home 底下建立一个与账号同名的目录作为用户家目录，且权限为700
				假设系统当中有个组名为 users ，且 UID 1500 并不存在，以users 为初始群组，uid为1500建立一个账号：
					$ useradd -u 1500 -g users username
				建立一个系统账号：
					$ useradd -r username
						默认情况：
							系统账号默认都不会主动建立家目录
							将账号与账号同名群组的UID/GID 都指定小于1000 以下
			3-useradd创建用户时，涉及改动的文件
				用户账号与密码参数方面的文件：/etc/passwd, /etc/shadow
				使用者群组相关方面的文件：/etc/group, /etc/gshadow
				用户的家目录：/home/账号名称
			4-useradd默认值来源：
				1)$ useradd -D          #数据其实来自/etc/default/useradd
					GROUP=100	#预设的群组
					HOME=/home	#默认的家目录所在目录
					INACTIVE=-1	#密码失效日，在 shadow 内的第 7 栏
					EXPIRE=		#账号失效日，在 shadow 内的第 8 栏
					SHELL=/bin/bash		#预设的 shell
					SKEL=/etc/skel		#用户家目录的内容数据参考目录
					CREATE_MAIL_SPOOL=yes	#是否主动帮使用者建立邮件信箱(mailbox)
				2)/etc/default/useradd
					GROUP=100：新建账号的初始群组GID为100
						GID为100者即是users这个群组,但是CentOS上面并不是这样，预设的群组为与账号名相同的群组。这是因为针对群组的角度有两种不同的机制所致，这两种机制分别是：
							a-私有群组机制:
								系统会建立一个与账号一样的群组给使用者作为初始群组。 这种群组的设定机制会比较有保密性，这是因为使用者都有自己的群组，而且家目录权限将会设定为700 (仅有自己可进入自己的家目录)之故。使用这种机制将不会参考GROUP=100 这个设定值。代表性的distributions 有RHEL,Fedora, CentOS 等
							b-公共群组机制：
								就是以GROUP=100 这个设定值作为新建账号的初始群组，因此每个账号都属于users 这个群组，且默认家目录通常的权限会是『drwxr-xr-x ... username users ... 』，由于每个账号都属于users 群组，因此大家都可以互相分享家目录内的数据之故。代表distributions 如SuSE 等。
					HOME=/home：用户家目录的基准目录(basedir)
					INACTIVE=-1：密码过期后是否会失效的设定值
						shadow文件第七个字段的设定值会影响到密码过期后，在多久时间内还可使用旧密码登入。如果是0代表密码过期立刻失效，如果是-1 则是代表密码永远不会失效，如果是数字，如30，则代表过期30天后才失效。
					EXPIRE=：账号失效的日期
						shadow 内的第八字段，直接设定账号在哪个日期后就直接失效，而不理会密码的问题。通常不会设定，但如果是付费的会员制系统，或许这个字段可以设定！
					SHELL=/bin/bash：默认使用的shell 程序文件名
						不许用户登入系统取得 shell ，那么可以将这里设定为/sbin/nologin
					SKEL=/etc/skel：用户家目录参考基准目录
						指定用户家目录的参考基准目录,家目录/home/user内的各项数据，都是由/etc/skel 所复制过去的
					CREATE_MAIL_SPOOL=yes：建立使用者的mailbox
						你可以使用ll /var/spool/mail/user,会发现有这个文件的存在.这是使用者的邮件信箱！
				3)除了这些基本的账号设定值之外， UID/GID 还有密码参数要看一下/etc/login.defs这个文件
					MAIL_DIR /var/spool/mail          #用户默认邮件信箱放置目录
					PASS_MAX_DAYS 99999          #/etc/shadow 内的第 5 栏，多久需变更密码日数
					PASS_MIN_DAYS 0          #/etc/shadow 内的第 4 栏，多久不可重新设定密码日数
					PASS_MIN_LEN 5          #密码最短的字符长度，已被 pam 模块取代，失去效用！
					PASS_WARN_AGE 7          #/etc/shadow 内的第 6 栏，过期前会警告的日数
					UID_MIN 1000          #使用者最小的 UID，意即小于 1000 的 UID 为系统保留
					UID_MAX 60000          #使用者能够用的最大 UID
					SYS_UID_MIN 201          #保留给用户自行设定的系统账号最小值 UID
					SYS_UID_MAX 999          #保留给用户自行设定的系统账号最大值 UID
					GID_MIN 1000          #使用者自定义组的最小 GID，小于 1000 为系统保留
					GID_MAX 60000          #使用者自定义组的最大 GID
					SYS_GID_MIN 201          #保留给用户自行设定的系统账号最小值 GID
					SYS_GID_MAX 999          #保留给用户自行设定的系统账号最大值 GID
					CREATE_HOME yes          #在不加 -M 及 -m 时，是否主动建立用户家目录？
					UMASK 077          #用户家目录建立的 umask ，因此权限会是 700
					USERGROUPS_ENAB yes          #使用 userdel 删除时，是否会删除初始群组
					ENCRYPT_METHOD SHA512          #密码加密的机制使用的是 sha512 这一个机制！
					总结主要有以下几个方面：
						mailbox 所在目录
 						shadow 密码第4, 5, 6 字段内容：
							透过 PASS_MAX_DAYS 等等设定值来指定的。所以预设的/etc/shadow 内每一行都会有0:99999:7。不过要注意的是，由于目前登入时改用PAM 模块来进行密码检验，所以那个PASS_MIN_LEN是失效的。
 						UID/GID 指定数值：
							虽然 Linux 核心支持的账号可高达232 这么多个，不过一部主机要作出这么多账号在管理上也是很麻烦的！所以在这里就针对UID/GID 的范围进行规范就是了。上表中的UID_MIN 指的就是可登入系统的一般账号的最小UID ，至于UID_MAX 则是最大UID 之意。
							要注意的是，系统给予一个账号UID 时：
								(1)先参考UID_MIN 设定值取得最小数值； 
								(2)由/etc/passwd 搜寻最大的UID 数值， 将 (1) 与(2) 相比，找出最大的那个再加一就是新账号的UID 了。
 						用户家目录设定值：
							CREATE_HOME = yes设定会让在使用useradd 时， 主动加入-m这个产生家目录的选项！如果不想要建立用户家目录，就只能强制加上-M的选项！透过umask设定用户家目录默认权限
 						用户删除与密码设定值：
							使用USERGROUPS_ENAB yes这个设定如果使用userdel去删除一个账号，且该账号所属的初始群组已经没有人隶属于该群组了，那么就删除掉该群组。ENCRYPT_METHOD SHA512』则表示使用SHA512 来加密密码明文，而不使用旧式的MD5。
			5-useradd创建用户时，参考的文件：
				/etc/default/useradd
				/etc/login.defs
				/etc/skel/*
		2. 使用 useradd 建立了账号之后，在预设的情况下，该账号是暂时被封锁的，该账号是无法登入的,原因可以去查看/etc/shadow 内的第二个字段
			passwd [--stdin] [账号名称]		#所有人均可使用来改自己的密码	
			passwd [-l] [-u] [--stdin] [-S] [-n 日数] [-x 日数] [-w 日数] [-i 日期] 账号  	#root的功能
			1-选项与参数：







