1、我们前面一直谈到的大多是一般身份用户与系统管理员(root) 的相关操作，而且大多是讨论关于可登入系统的账号来说。那么换个角度想，如果我今天想要建立的， 是一个『仅能使用mail server相关邮件服务的账号，而该账号并不能登入Linux主机』呢？如果不能给予该账号一个密码，那么该账号就无法使用系统的各项资源，当然也包括mail 的资源，而如果给予一个密码，那么该账号就可能可以登入Linux 主机。在本章之前谈到过/etc/login.defs 文件中，关于密码长度应该默认是5 个字符串长度，但是我们上面也谈到，该设定值已经被PAM 模块所取代了，那么PAM是什么？
2、特殊的shell, /sbin/nologin
	/etc/passwd文件结构里面我们就谈过系统账号，他们的shell就是使用/sbin/nologin，重点在于系统账号是不需要登入的。所以我们就给他这个无法登入的合法shell。使用了这个shell 的用户即使有了密码，你想要登入时他也无法登入，因为会出现如下的讯息喔：This account is currently not available.
		无法登入指的仅是：使用者无法使用bash或其他shell来登入系统而已，并不是说这个账号就无法使用其他的系统资源。举例来说，各个系统账号，打印作业由 lp 这个账号在管理，WWW 服务由apache这个账号在管理，他们都可以进行系统程序的工作，但是就是无法登入主机取得shell而已。
	如果想让某个具有/sbin/nologin的使用者知道，不能登入主机时，可以建立/etc/nologin.txt文件，并且在这个文件内说明不能登入的原因，下次当用户想要登入系统时， 屏幕上出现的就会是/etc/nologin.txt文件内容，而不是预设内容。
3、PAM 模块简介
	1-在过去，要对一个使用者进行认证(authentication)，得要要求用户输入账号密码，然后透过自行撰写的程序来判断该账号密码是否正确。也因为如此，我们常常得使用不同的机制来判断账号密码，所以一部主机上面拥有多个各别的认证系统，也造成账号密码可能不同步的验证问题！为了解决这个问题因此有了PAM(Pluggable Authentication Modules,嵌入式模块)的机制。
	2-PAM 可以说是一套应用程序编程接口(Application Programming Interface, API)，他提供了一连串的验证机制，只要使用者将验证阶段的需求告知PAM 后， PAM 就能够回报使用者验证的结果(成功或失败)。由于PAM 仅是一套验证的机制，又可以提供给其他程序所呼叫引用，因此不论你使用什么程序，都可以使用PAM 来进行验证，如此一来，就能够让账号密码或者是其他方式的验证具有一致的结果！也让程序员方便处理验证的问题
	3-PAM是一个独立的API存在，只要任何程序有需求时，可以向PAM发出验证要求的通知，PAM经过一连串的验证后，将验证的结果回报给该程序，然后该程序就能够利用验证的结果来进行可登入或显示其他无法使用的讯息。这也就是说，你可以在写程序的时候将PAM模块的功能加入，就能够利用PAM的验证功能啰。因此目前很多程序都会利用PAM。
	4-PAM用来进行验证的数据称为模块(Modules)，每个PAM 模块的功能都不太相同。举例来说，还记得我们在本章使用passwd指令时，如果随便输入字典上面找的到的字符串， passwd 就会回报错误信息。这就是PAM 的pam_cracklib.so 模块的功能！他能够判断该密码是否在字典里面！并回报给密码修改程序，此时就能够了解你的密码强度了。所以，当你有任何需要判断是否在字典当中的密码字符串时，就可以使用 pam_cracklib.so 这个模块来验证。
4、PAM 模块设定语法：
	1-PAM 藉由一个与程序相同文件名的配置文件来进行一连串的认证分析需求。我们同样以passwd这个指令的调用PAM来说明。当你执行passwd后，这支程序调用PAM的流程是：
		1. 用户开始执行/usr/bin/passwd 这支程序，并输入密码；
		2. passwd 呼叫PAM 模块进行验证；
		3. PAM 模块会到/etc/pam.d/找寻与程序(passwd)同名的配置文件；
		4. 依据/etc/pam.d/passwd 内的设定，引用相关的PAM 模块逐步进行验证分析；
		5. 将验证结果(成功、失败以及其他讯息) 回传给passwd 这支程序；
		6. passwd 这支程序会根据PAM 回传的结果决定下一个动作(重新输入新密码或者通过验证！)
	2-/etc/pam.d/passwd
		在这个配置文件当中，除了第一行PAM 版本之外，其他任何#开头的都是批注，而每一行都是一个独立的验证流程， 每一行可以区分为三个字段，分别是验证类别(type)、控制标准(flag)、PAM 的模块与该模块的参数。底下我们先来谈谈验证类别与控制标准这两项数据：
			控制标准中include这个关键词代表的是调用后面的文件来作为这个类别的验证，所以，每一行都要重复呼叫/etc/pam.d/system-auth文件来进行验证
			1）第一个字段：验证类别(Type)，验证类别主要分为四种，分别说明如下：
				1-auth
					authentication (认证) 的缩写，所以这种类别主要用来检验使用者的身份验证，这种类别通常是需要密码来检验的， 所以后续接的模块是用来检验用户的身份。
				2-account
					account (账号) 则大部分是在进行authorization (授权)，这种类别则主要在检验使用者是否具有正确的权限，举例来说，当你使用一个过期的密码来登入时，当然就无法正确的登入了。
				3-session
					session 是会议期间的意思，所以session 管理的就是使用者在这次登入(或使用这个指令) 期间，PAM 所给予的环境设定。这个类别通常用在记录用户登入与注销时的信息！例如，如果你常常使用su 或者是sudo指令的话， 那么应该可以在/var/log/secure 里面发现很多关于pam 的说明，而且记载的数据是『sessionopen, session close』的信息！
				4-password
					所以这种类别主要在提供验证的修订工作，举例来说，就是修改/变更密码。
			这四个验证的类型通常是有顺序的，不过也有例外就是了。会有顺序的原因是，(1)要先验证身份(auth) 后，(2)系统才能够藉由用户的身份给予适当的授权与权限设定(account)，而且(3)登入与注销期间的环境才需要设定，也才需要记录登入与注销的信息 (session)。如果在运作期间需要密码修订时，(4)才给予password 的类别。这样说起来是需要有点顺序。
			2）第二个字段：验证的控制旗标(control flag),简单的说，他就是『验证通过的标准』啦！ 这个字段在管控该验证的放行方式，主要也分为四种控制方式：
				1-required
					此验证若成功则带有success (成功) 的标志，若失败则带有failure 的标志，但不论成功或失败都会继续后续的验证流程。由于后续的验证流程可以继续进行，因此相当有利于资料的登录(log) ，这也是PAM 最常使用required 的原因。
				2-requisite
					若验证失败则立刻回报原程序failure 的标志，并终止后续的验证流程。若验证成功则带有success的标志并继续后续的验证流程。这个项目与required 最大的差异，就在于失败的时候还要不要继续验证下去,由于requisite 是失败就终止， 因此失败时所产生的PAM 信息就无法透过后续的模块来记录了。
				3-sufficient
					若验证成功则立刻回传success 给原程序，并终止后续的验证流程；若验证失败则带有failure 标志并继续后续的验证流程。与requisite刚好相反
				4-optional
					这个模块控件目大多是在显示讯息而已，并不是用在验证方面的。
			验证结束后所回报的信息通常是『succes 或failure 』而已，后续的流程还需要该程序的判断来继续执行才行。
5、常用模块简介：
	1）可以查看：
		$ cat /etc/pam.d/login
		$ cat /etc/pam.d/system-auth
	/etc/pam.d/*：每个程序个别的PAM 配置文件；
	/lib64/security/*：PAM 模块文件的实际放置目录；
	/etc/security/*：其他PAM 环境的配置文件；
	/usr/share/doc/pam-*/：详细的PAM 说明文件。
	2）CentOS 7.1 ，pam_nologin 说明文件档在：/usr/share/doc/pam-1.1.8/txts/README.pam_nologin，介绍几个较常使用的模块：
		1-pam_securetty.so：
			限制系统管理员(root) 只能够从安全的(secure) 终端机登入；那什么是终端机？例如tty1, tty2 等就是传统的终端机装置名称。那么安全的终端机设定呢？ 就写在 /etc/securetty 这个文件中。你可以查阅一下该文件，就知道为什么root 可以从tty1~tty7 登入，但却无法透过telnet登入Linux 主机
		2-pam_nologin.so：
			这个模块可以限制一般用户是否能够登入主机之用。当/etc/nologin 这个文件存在时，则所有一般使用者均无法再登入系统了！若/etc/nologin 存在，则一般使用者在登入时， 在他们的终端机上会将该文件的内容显示出来！所以，正常的情况下，这个文件应该是不能存在系统中的。但这个模块对root 以及已经登入系统中的一般账号并没有影响。(注意！这与/etc/nologin.txt 并不相同！)
		3-pam_selinux.so：
			SELinux 是个针对程序来进行细部管理权限的功能，SELinux 这玩意儿我们会在第十六章的时候再来详细谈论。由于SELinux 会影响到用户执行程序的权限，因此我们利用PAM 模块，将SELinux 暂时关闭，等到验证通过后，再予以启动！
		4-pam_console.so：
			当系统出现某些问题，或者是某些时刻你需要使用特殊的终端接口(例如RS232 之类的终端联机设备) 登入主机时， 这个模块可以帮助处理一些文件权限的问题，让使用者可以透过特殊终端接口(console) 顺利的登入系统。
		5-pam_loginuid.so：
			系统账号与一般账号的UID 是不同的！一般账号UID 均大于1000 才合理。因此，为了验证使用者的UID 真的是我们所需要的数值，可以使用这个模块来进行规范！
		6-pam_env.so：
			用来设定环境变量的一个模块，如果需要额外的环境变量设定，可以参考/etc/security/pam_env.conf 这个文件的详细说明。
		7-pam_unix.so：
			这是个很复杂且重要的模块，这个模块可以用在验证阶段的认证功能，可以用在授权阶段的账号许可证管理， 可以用在会议阶段的登录文件记录等，甚至也可以用在密码更新阶段的检验！非常丰富的功能！ 这个模块在早期使用得相当频繁！
		8-pam_pwquality.so：
			可以用来检验密码的强度！包括密码是否在字典中，密码输入几次都失败就断掉此次联机等功能，都是这模块提供的！ 最早之前其实使用的是pam_cracklib.so 这个模块，后来改成pam_pwquality.so 这个模块，但此模块完全兼容于pam_cracklib.so， 同时提供了/etc/security/pwquality.conf 这个文件可以额外指定默认值！比较容易处理修改！
		9-pam_limits.so：
			第十章谈到的ulimit，就是这个模块提供的能力！还有更多细部的设定可以参考：/etc/security/limits.conf 内的说明。
6、了解了这些模块的大致功能后，讨论一下 login 的PAM 验证机制流程：
	
				