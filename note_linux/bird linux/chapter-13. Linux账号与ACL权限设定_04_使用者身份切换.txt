1、为什么要作身份的变换？
	1）使用一般账号：系统平日操作的好习惯，避免作错一些严重的指令，例如rm -rf /
	2）用较低权限启动系统服务
	3）软件本身的限制：在远古时代的 telnet 程序中，该程序默认是不许使用 root 的身份登入的，telnet 会判断登入者的UID，若UID为0 的话，那就直接拒绝登入了。此外， ssh也可以设定拒绝root登入
	由于上述考虑，所以使用一般账号登入系统，等有需要进行系统维护或软件更新时才转为root
2、转换身份两种方式：
	1）以『su - 』直接将身份变成root 即可，但是这个指令需要root密码
	2）以『sudo 指令』执行root 的指令串，由于sudo需要事先设定，且sudo 需要输入用户自己的密码，因此多人共管同一部主机时，sudo 要比su好。至少root 密码不会流出去！
3、su 是最简单的身份切换指令，可以进行任何身份的切换
	su [-lm] [-c 指令] [username]
	1-选项与参数：
		- ：单纯使用 - 如『 su - 』代表使用 login-shell 的变量文件读取方式来登入系统；
			若使用者名称没有加上去，则代表切换为 root 的身份。
		-l ：与 - 类似，但后面需要加欲切换的使用者账号！也是 login-shell 的方式。
		-m ：-m 与 -p 是一样的，表示『使用目前的环境设定，而不读取新使用者的配置文件』
		-c ：仅进行一次指令，所以 -c 后面可以加上指令喔！
	2-注意：减号『- 』很重要，因为涉及login-shell 与non-login shell的变量读取方法，具体看第十章login-shell配置文件读取方式
	单纯使用『su 』切换成为root 的身份，读取的变量设定方式为non-login shell的方式，这种方式很多原本的变量不会被改变，尤其是我们之前谈过很多次的PATH 这个变量，由于没有改变成为root 的环境，因此很多root惯用的指令就只能使用绝对路径来执行咯。其他的还有MAIL这个变量等等
	3-eg:
		执行root才能进行的指令，且执行完毕就恢复原本的身份
			$ su - -c "head -n 3 /etc/shadow"
	4-说明：
		1_su就这样简单的介绍完毕，总结一下他的用法是这样的：
		 1）若要完整的切换到新使用者的环境，必须要使用su - username或su -l username ，才会连同PATH/USER/MAIL 等变量都转成新用户的环境；
		 2）如果仅想要执行一次root 的指令，可以利用『su - -c "指令串" 』的方式来处理；
		 3）使用root切换成为任何使用者时，并不需要输入新用户的密码；
		2_虽然使用su 很方便啦，不过，当主机是多人共管时，如果都要使用su来切换成为root，那么每个人都得知道root密码，这样密码可能会流出去。解决这个问题？可以透过sudo。
4、sudo的执行则仅需要自己的密码即可！甚至可以设定不需要密码即可执行sudo。由于sudo可以让你以其他用户的身份执行指令(通常是使用root的身份来执行指令)，仅有规范到/etc/sudoers内的用户才能够执行sudo这个指令。
	1-一开始系统默认仅有root 可以执行sudo ，先以root 的身份来执行，等到visudo时，再以一般使用者来讨论
	sudo [-b] [-u 新使用者账号]
		选项与参数：
			-b ：将后续的指令放到背景中让系统自行执行，而不与目前的 shell 产生影响
			-u ：后面可以接欲切换的使用者，若无此项则代表切换身份为 root 。
	2-root's eg:
		以sshd 的身份在/tmp底下建立一个名为 mysshd 的文件
			$ sudo -u sshd touch /tmp/mysshd
	3-说明：
		sudo可以切换身份来进行某项任务。范例中，root使用sshd的权限去进行某项任务！要注意，因为我们无法使用su - sshd去切换系统账号(因为系统账号的shell 是/sbin/nologin)，这个时候sudo真是好用！立刻以sshd 的权限在/tmp 底下建立文件！
		为什么sudo预设仅有root能使用？因为sudo 的执行是这样的流程：
			1. 当用户执行sudo 时，系统于/etc/sudoers 文件中搜寻该使用者是否有执行sudo 的权限；
			2. 若使用者具有可执行sudo 的权限后，便让使用者『输入用户自己的密码』来确认；
			3. 若密码输入成功，便开始进行sudo 后续接的指令(但root 执行sudo 时，不需要输入密码)；
			4. 若欲切换的身份与执行者身份相同，那也不需要输入密码。
		所以sudo执行的重点是：能否使用sudo必须要看/etc/sudoers 的设定值，而可使用sudo者是透过输入用户自己的密码来执行后续的指令串！由于能否使用与/etc/sudoers 有关，该文件的内容是有一定的规范的，因此直接使用vi去编辑是不好的。此时，得透过visudo去修改这个文件
	4-visudo 与/etc/sudoers
		除了root 之外的其他账号，若想要使用sudo执行属于root的权限指令，则root需要先使用visudo去修改/etc/sudoers，让该账号能够使用全部或部分的root 指令功能。为什么使用visudo？这是因为/etc/sudoers是有设定语法的，如果设定错误那会造成无法使用sudo 指令的不良后果。因此才会使用visudo 去修改， 并在结束离开修改画面时，系统会去检验/etc/sudoers的语法。visudo 的设定方式有几种简单的方法：
		1）单一用户可进行root 所有指令，与sudoers 文件语法：
			使用者账号 登入者的来源主机名=(可切换的身份) 可下达的指令
			root ALL=(ALL) ALL <==这是默认值，大概98行左右
			上面这一行的四个组件意义是：
				1. 『使用者账号』：系统的哪个账号可以使用sudo 这个指令的意思；
				2. 『登入者的来源主机名』：当这个账号由哪部主机联机到本Linux 主机，意思是这个账号可能是由哪一部网
				络主机联机过来的， 这个设定值可以指定客户端计算机(信任的来源的意思)。默认值root 可来自任何一部
				网络主机
				3. 『(可切换的身份)』：这个账号可以切换成什么身份来下达后续的指令，默认root 可以切换成任何人；
				4. 『可下达的指令』：可用该身份下达什么指令？这个指令请务必使用绝对路径撰写。预设 root 可以切换任
				何身份且进行任何指令之意。
			设置某用户，下面增加一行即可！
		2）利用wheel群组以及免密码的功能处理visudo
			%wheel ALL=(ALL) ALL <==大约在 106 行左右，请将这行的 # 拿掉！
			# 在最左边加上 % ，代表后面接的是一个『群组』之意！改完请储存后离开
		3）如果不需要密码即可执行：
			%wheel ALL=(ALL) NOPASSWD: ALL <==大约在 109 行左右，请将 # 拿掉！
			重点是那个NOPASSWD。该关键词是免除密码输入的意思
		4）有限制的指令操作：
			1_myuser1 ALL=(root) /usr/bin/passwd <==最后指令务必用绝对路径
				上面的设定值指的是myuser1 可以切换成为root使用passwd 这个指令的意思。其中要注意的是：指令字段必须要填写绝对路径才行。否则visudo 会出现语法错误的状况发生！ 此外，上面的设定是有问题的
					$ sudo passwd  #执行才语句会造成该root密码的情况
			2_myuser1 ALL=(root) !/usr/bin/passwd, /usr/bin/passwd [A-Za-z]*, !/usr/bin/passwd root
				不可执行passwd与passwd root这两个指令
			
		
		
		
		
		
	