1、什么是daemon与服务(service)
	1）服务是『常驻在记体体中的程序，且可以提供一些系统或网路功能，那就是服务』。服务一般的英文说法是『 service 』。
	但如果你常常上网去查看一些数据的话，尤其是 Unix-Like 的相关操作系统，应该常常看到『请启动某某daemon 来提供某某功能』，那么daemon 与service 有关啰？否则为什么都能够提供某些系统或网络功能？此外，这个daemon是什么东西呀？daemon的字面上的意思就是『守护神、恶魔？』还真是有点奇怪。简单的说，系统为了某些功能必须要提供一些服务(不论是系统本身还是网络方面)，这个服务就称为service 。但是 service 的提供总是需要程序的运作吧！否则如何执行呢？所以达成这个service的程序我们就称呼他为daemon。举例来说，达成循环型例行性工作排程服务(service) 的程序为crond 这个daemon。
	2）不必去区分什么是daemon与service！事实上，你可以将这两者视为相同！因为达成某个服务是需要一支daemon在背景中运作，没有这支daemon就不会有service！所以不需要分的太清楚啦！一般来说，当我们以文本模式或图形模式 (非单人维护模式) 完整开机进入Linux 主机后，系统已经提供我们很多的服务了！包括打印服务、工作排程服务、邮件管理服务等等。
	3）daemon既然是一只程序执行后的程序，那么daemon 所处的那个原本的程序通常是如何命名的呢(daemon程序的命名方式)。每一个服务的开发者，当初在开发他们的服务时，都有特别的故事！不过，无论如何，这些服务的名称被建立之后，被挂上Linux使用时，通常在服务的名称之后会加上一个d，例如例行性命令的建立的at,与cron这两个服务，他的程序文件名会被取为atd与crond，这个d代表的就是daemon 的意思。所以，在第十六章中，我们使用了ps 与top 来观察程序时，都会发现到很多的{xxx}d 的程序。
2、早期System V的init 管理行为中daemon 的主要分类(Optional)
	第一章谈到过Unix的systemV版本？那个很纯种的Unix版本～在那种年代底下，启动系统服务的管理方式被称为SysV的init脚本程序的处理方式！亦即系统核心第一支呼叫的程序是init，然后init去唤起所有的系统所需要的服务，不论是本地服务还是网络服务就是了。
	1）daemon 的主要分类
		如果依据daemon 的启动与管理方式来区分，基本上，可以将daemon分为可独立启动的stand alone，与透过一支super daemon来统一管理的服务这两大类，这两类daemon 的说明如下：
		1-stand_alone：此daemon 可以自行单独启动服务
			就字面上的意思来说，stand alone就是『独立的启动』的意思。这种类型的daemon可以自行启动而不必透过其他机制的管理， daemon启动并载入到记忆体后就一直占用记忆体与系统资源。最大的优点就是：因为是一直存在记忆体内持续的提供服务，因此对于发生用户端的要求时，stand alone的daemon回应速度较快。常见的stand alone daemon有WWW的daemon (httpd)、FTP的daemon (vsftpd)等等。
		2-super daemon： 一支特殊的daemon 来统一管理
			这一种服务的启动方式则是藉由一个统一的daemon来负责唤起服务！这个特殊的daemon就被称为super daemon 。早期的super daemon是inetd这一个，后来则被xinetd所取代了。这种机制比较有趣的地方在于， 当没有用户端的要求时，各项服务都是未启动的情况，等到有来自用户端的要求时， super daemon才唤醒相对应的服务。当用户端的要求结束后，被唤醒的这个服务也会关闭并释放系统资源。
			这种机制的好处是： (1)由于super daemon负责唤醒各项服务，因此super daemon可以具有安全控管的机制，就是类似网路防火墙的功能啦！ (2)由于服务在用户端的连线结束后就关闭，因此不会一直占用系统资源。但是缺点是什么呢？因为有用户端的连线才会唤醒该服务，而该服务载入到记忆体的时间需要考虑进去，因此服务的反应时间会比较慢一些啦！常见的super daemon所管理的服务例如telnet
		3-窗口类型的解说：
			那么这两种启动的方式哪一个比较好？见仁见智啦！而且还要看该主机的工作负荷与实际的用途！例如当你的主机是用来作为WWW伺服器的，那么httpd自然就以stand alone的启动方式较佳！说明 stand alone 与super daemon 的情况，可以银行的窗口来作为说明的范例
			1-个别窗口负责单一服务的stand alone：
				在银行里面，假设有一种单一服务的窗口，例如存钱窗口，所以当你需要存钱的时候，直接前往该窗口，就有『专人』为你服务啦！这就是sta	nd alone的情况。
			2-统一窗口负责各种业务的super daemon：
				在银行里面假设还有另外一种复合型态的统一窗口，同时提供转帐、资金调度、提款等等的业务，那当你需要其中一项业务的时候，就需要前往该窗口。但是坐在窗口的这个营业员，拿到你的需求单之后，往后面一丢『喂！那个转帐的仁兄！该你的工作了』那么那个仁兄就开始工作去！然而里头还有资金调度与提款等负责业务的仁兄呢？他们在看看报、喝喝茶！
				那么这里就会引出另外一个问题啦！假设银行今天的人潮特别的汹涌，所以这个窗口后面除了你之外还有很多的人！那么想一想，这个窗口是要『一个完成再来下一个』还是『全部都把你们的单据拿来，我全部处理掉』呢？呵呵！是不是不太一样？基本上，针对这种super daemon的处理模式有两种，分别是这样：
					multi-threaded (多重执行绪)：
						就是我们提到的，全部的客户之要求都给他拿来，一次给他交办下去，所以一个服务同时会负责好几个程序。
					single-threaded (单一执行绪)：
						这个就是目前我们『人类的银行』最常见的方式啦，不论如何，反正一个一个来，第一个没有处理完之前，后面的请排队！所以如果client的要求突然大增的话，那么这些晚到的client可得等上一等！
		4-daemon 工作形态的类型
			如果以daemon 提供服务的的工作状态来区分，又可以将daemon分为两大类，分别是：
			signal-control
				这种daemon是透过讯号来管理的，只要有任何用户端的需求进来，他就会立即启动去处理！例如印表机的服务(cupsd)。 
			interval-control
				这种daemon则主要是『每隔一段时间就主动的去执行某项工作』，所以，你要作的是在设定档指定服务要进行的时间与工作，该服务在指定的时间才会去完成工作。我们在第十六章提到的atd与crond就属于这种类型的daemon啦(每分钟侦测一次设定档)
				另外，如果你对于开发程式很有兴趣的话，那么可以自行查阅一下『 man 3 daemon 』看看系统对于daemon 的详细说明。
		5-daemon 的命名规则
			每一个服务的开发者，当初在开发他们的服务时，都有特别的故事！不过，无论如何，这些服务的名称被建立之后，被挂上Linux使用时，通常在服务的名称之后会加上一个d，例如例行性命令的建立的at,与cron这两个服务，他的程序文件名会被取为atd与crond，这个d代表的就是daemon 的意思。所以，在第十六章中，我们使用了ps 与top 来观察程序时，都会发现到很多的{xxx}d 的程序。
	2）服务与埠口的对应
		系统上面设定服务与埠号对应在一起文件为/etc/services
	3）daemon 的启动脚本与启动方式
		提供某个服务的daemon 虽然只是一支程式而已，但是这支daemon 的启动还是需要执行档、设定档、执行环境等等， 举例来说，你可以查阅一下httpd 这个程式(man httpd) ，里面可谈到不少的选项与参数呢！此外，为了管理上面的方便， 所以通常distribution 都会记录每一支daemon 启动后所取得程序的PID 在/var/run/ 这个目录下呢！还有还有，在启动这些服务之前，你可能也要自行处理一下daemon 能够顺利执行的环境是否正确等等。要启动一支daemon 考虑的事情很多，并非单纯执行一支程式就够了。
		为了解决上面谈到的问题，因此通常distribution会给我们一个简单的shell script来进行启动的功能。该script可以进行环境的侦测、设定档的分析、PID档案的放置，以及相关重要交换档案的锁住(lock)动作，你只要执行该script ，上述的动作就一口气连续的进行，最终就能够顺利且简单的启动这个daemon。
		1-那么这些daemon 的启动脚本(shell script) 放在哪里？还有， CentOS 5.x 通常将daemon 相关的档案放在哪里？以及某些重要的设定档又是放置到哪里？基本上是放在这些地方：
			/etc/init.d/* ：启动脚本放置处
				统上几乎所有的服务启动脚本都放置在这里！事实上这是公认的目录，我们的CentOS实际上放置在/etc/rc.d/init.d/啦！不过还是有设定连结档到/etc/init.d/的！既然这是公认的目录，因此建议您记忆这个目录即可！
			/etc/sysconfig/* ：各服务的初始化环境设定档
				几乎所有的服务都会将初始化的一些选项设定写入到这个目录下，举例来说，登录档的syslog这支daemon的初始化设定就写入在/etc/sysconfig/syslog这里呢！而网路的设定则写在/etc/sysconfig/network这个档案中。所以，这个目录内的档案也是挺重要的；
			/etc/xinetd.conf, /etc/xinetd.d/* ：super daemon设定档
				super daemon的主要设定档(其实是预设值)为/etc/xinetd.conf ，不过我们上面就谈到了， super daemon只是一个统一管理的机制，他所管理的其他daemon的设定则写在/etc/xinetd.d/*里头喔！
			/etc/* ：各服务各自的设定档
				第六章就讲过了，大家的设定档都是放置在/etc/底下的喔！
			/var/lib/* ：各服务产生的资料库
				一些会产生资料的服务都会将他的资料写入到/var/lib/目录中。举例来说，资料库管理系统MySQL的资料库预设就是写入/var/lib/mysql/这个目录下啦！
			/var/run/* ：各服务的程序之PID记录处
				之前谈到可以使用讯号(signal)来管理程序，既然daemon是程序，所以当然也可以利用kill或killall来管理啦！不过为了担心管理时影响到其他的程序，因此daemon通常会将自己的PID记录一份到/var/run/当中！例如登录档的PID就记录在/var/run/syslogd.pid这个档案中。如此一来， /etc/init.d/syslog就能够简单的管理自己的程序啰。
		2-上面谈到的部分是设定档，那么stand alone 与super daemon 所管理的服务启动方式怎么做：
			1/Stand alone 的/etc/init.d/* 启动
				刚刚谈到了几乎系统上面所有服务的启动脚本都在/etc/init.d/底下，这里面的脚本会去侦测环境、搜寻设定档、载入distribution提供的函数功能、判断环境是否可以运作此daemon等等，等到一切都侦测完毕且确定可以运作后，再以shell script的case....esac语法来启动、关闭、观察此daemon！我们可以简单的以/etc/init.d/syslog这个登录档启动脚本来进行说明：
					eg:
						$ /etc/init.d/syslog
							用法: /etc/init.d/syslog {start|stop|status|restart|condrestart}
							# 什么参数都不加的时候，系统会告诉你可以用的参数有哪些。
						$ /etc/init.d/syslog status
							syslogd (pid 4264) 正在执行...
							klogd (pid 4267) 正在执行...
							# 代表syslog 管理两个daemon ，这两个daemon 正在运作中！
						$ /etc/init.d/syslog restart
							正在关闭核心记录器: [ 确定 ]
							正在关闭系统记录器: [ 确定 ]
							正在启动系统记录器: [ 确定 ]
							正在启动核心记录器: [ 确定 ]
						$ /etc/init.d/syslog status
							syslogd (pid 4793) 正在执行...
							klogd (pid 4796) 正在执行...
							# 因为重新启动过，所以PID 与第一次观察的值就不一样了
				由于系统的环境都已经帮你制作妥当，所以利用/etc/init.d/*来启动、关闭与观察，就非常的简单！话虽如此， CentOS还是有提供另外一支可以启动stand alone 服务的脚本喔，那就是service这个程式。其实service仅是一支script 啦,他可以分析你下达的service 后面的参数，然后根据你的参数再到/etc/init.d/去取得正确的服务来start 或stop ！他的语法是这样的啦：
					service [service name] (start|stop|restart|...) 
					service --status-all 
						选项与参数：
						service name：亦即是需要启动的服务名称，需与/etc/init.d/ 对应；
						start|... ：亦即是该服务要进行的工作。
						--status-all：将系统所有的stand alone 的服务状态通通列出来
					eg：
						$ service crond restart 
						$ /etc/init.d/crond restart
							#两种方法随便你用哪一种来处理都可以
			2/Super daemon 的启动方式
				其实Super daemon本身也是一支stand alone的服务，因为super daemon要管理后续的其他服务，他当然自己要常驻在记忆体中！所以Super daemon自己启动的方式与stand alone是相同的！但是他所管理的其他daemon就不是这样做啰！必须要在设定档中设定为启动该daemon才行。设定档就是/etc/xinetd.d/*的所有档案。那如何得知super daemon所管理的服务是否有启动呢？你可以这样做：
					$ grep -i 'disable' /etc/xinetd.d/* 
						...(前面省略)....
						/etc/xinetd.d/rsync: disable = yes
						/etc/xinetd.d/tcpmux-server: disable = yes
						/etc/xinetd.d/time-dgram: disable = yes
						/etc/xinetd.d/time-stream: disable = yes
				因为disable 是『取消』的意思，因此如果『 disable = yes 』则代表取消此项服务的启动，如果是『 disable = no 』 才是有启动该服务啦！假设我想要启动如上的rsync这个服务，那么你可以这样做：
					#1.先修改设定档成为启动的模样： 
					$ vim /etc/xinetd.d/rsync 
					#将disable那一行改成如下的模样(原本是yes改成no就对了)
					service rsync
					{
							disable = no 
					....(后面省略)....

					# 2.重新启动xinetd这个服务 
					$ /etc/init.d/xinetd restart
					正在停止xinetd: [ 确定 ]
					正在启动xinetd: [ 确定 ]

					# 3.观察启动的埠口 
					$ grep 'rsync' /etc/services   <==先看看埠口是哪一号
					rsync 873/tcp # rsync
					rsync 873/udp # rsync
					$ netstat -tnlp | grep 873 
					tcp 0 0 0.0.0.0: 873       0.0.0.0:* LISTEN 4925/ xinetd 
					#注意看！启动的服务并非rsync喔！而是xinetd ，因为他要控管rsync！
				也就是说，你先修改/etc/xinetd.d/ 底下的设定档，然后再重新启动xinetd！xinetd 是一个stand alone启动的服务！这部份得要特别留意！
	4）解析super daemon 的设定档
		前一小节谈到的super daemon我们现在知道他是一支总管程序，这个super daemon是xinetd这一支程序所达成的。xinetd可以进行安全性或者是其他管理机制的控管，xinetd也能够控制连线的行为。这些控制的手段都可以让我们的某些服务更为安全，资源管理更为合理。而由于super daemon可以作这样的管理，因此一些对用户端开放较多权限的服务(例如telnet)，或者本身不具有管理机制或防火墙机制的服务，就可以透过xinetd来管理啊！
		既然这么重要，那么底下我们就来谈谈xinetd 这个服务的预设设定档/etc/xinetd.conf ，以及各个设定项目的意义： 
			$ vim /etc/xinetd.conf
			defaults
			{
			#服务启动成功或失败，以及相关登入行为的记录档 
					log_type = SYSLOG daemon info   <==登录档的记录服务类型 
					log_on_failure = HOST    <==发生错误时需要记录的资讯为主机(HOST) 
					log_on_success = PID HOST DURATION EXIT <==成功启动或登入时的记录资讯
			#允许或限制连线的预设值 
					cps = 50 10 <==同一秒内的最大连线数为50个，若超过则暂停10秒 
					instances = 50     <==同一服务的最大同时连线数 
					per_source = 10     <==同一来源的用户端的最大连线数
			#网路(network)相关的预设值 
					v6only = no <==是否仅允许IPv6 ？可以先暂时不启动IPv6支援！
			#环境参数的设定
					groups = yes
					umask = 002
			}

			includedir /etc/xinetd.d <==更多的设定值在/etc/xinetd.d那个目录内
		为什么/etc/xinetd.conf可以称为预设值的设定档呢？因为如果你有启动某个super daemon管理的服务，但是该服务的设定值并没有指定上述的那些项目，那么该服务的设定值就以上述的预设值为主！至于上述的预设值会将super daemon管理的服务设定为：『一个服务最多可以有50个同时连线，但每秒钟发起的「新」连线最多仅能有50条，若超过50条则该服务会暂停10秒钟。同一个来源的用户最多仅能达成10条连线。而登入的成功与失败所记录的资讯并不相同。』
		既然这只是个预设参数档，那么自然有更多的服务参数档案啰～没错～而所有的服务参数档都在 /etc/xinetd.d 里面，这是因为上表当中的最后一行。每个参数档案的内容是怎样呢：
			service <service_name>
			{
				   <attribute> <assign_op> <value> <value> ...
				   .............
			}
		第一行一定都有个service ，至于那个<service_name>里面的内容，则与/etc/services 有关，因为他可以对照着/etc/services内的服务名称与埠号来决定所要启用的port是哪个啊！然后相关的参数就在两个大刮号中间。attribute是一些xinetd的管理参数， assign_op则是参数的设定方法。assign_op的主要设定形式为：
			 = ：表示后面的设定参数就是这样啦！
			+= ：表示后面的设定为『在原来的设定里头加入新的参数』
			-= ：表示后面的设定为『在原来的参数舍弃这里输入的参数！』
		attribute (功能)			说明与范例
		一般设定项目：服务的识别、启动与程式
		disable (启动与否)			设定值：[yes|no]，预设disable = yes
									disable 为取消的意思，此值可设定该服务是否要启动。预设所有的super daemon 管理的服务都不启动的。若要启动就得要设定为『 disable = no 』
		id (服务识别)				设定值：[服务的名称]
									虽然服务在设定档开头『service服务名称』已经指定了，不过有时后会有重复的设定值，此时可以用id来取代服务名称。你可以参考一下/etc/xinetd.d/time-stream 来思考一下原理。
		server (程式档名)			设定值：[program 的完整档名]
									这个就是指出这个服务的启动程式！例如/usr/bin/rsync 为启动rsync 服务的指令，所以这个设定值就会成为： 『 server = /usr/bin/rsync 』
		server_args (程式参数)		设定值：[程式相关的参数]
									这里应该输入的就是你的server 那里需要输入的一些参数啦！例如rsync 需要加入--daemon ， 所以这里就设定：『 server_args = --daemon 』。与上面server 搭配，最终启动服务的方式『/usr/bin/rsync --daemon』
		user (服务所属UID)			设定值：[使用者帐号]
									如果xinetd 是以root 的身份启动来管理的，那么这个项目可以设定为其他使用者。此时这个daemon 将会以此设定值指定的身份来启动该服务的程序喔！举例来说，你启动rsync 时会以这个设定值作为该程序的UID。
		group						跟user 的意思相同！此项目填入群组名称即可。
		一般设定项目：连线方式与连线封包协定
		socket_type (封包类型)		设定值：[stream|dgram|raw]，与封包有关
									stream 为连线机制较为可靠的TCP 封包，若为UDP 封包则使用dgram 机制。raw 代表server 需要与IP 直接对谈！举例来说rsync 使用TCP ，故设定为『socket_type = stream 』
		protocol (封包类型)			设定值：[tcp|udp]，通常使用socket_type 取代此设定
									使用的网路通讯协定，需参考/etc/protocols 内的通讯协定，一般使用tcp 或udp。由于与socket_type 重复， 因此这个项目可以不指定。
		wait (连线机制)				设定值：[yes(single)|no(multi)]，预设wait = no
									这就是我们刚刚提到的Multi-threaded与single-threaded ！一般来说，我们希望大家的要求都可以同时被启用，所以可以设定『 wait = no 』此外，一般udp设定为yes而tcp设定为no。
		instances (最大连线数)		设定值：[数字或UNLIMITED]
									这个服务可接受的最大连线数量。如果你只想要开放30 个人连线rsync 时，可在设定档内加入：『 instances = 30 』
		per_source (单一用户来源)	设定值：[一个数字或UNLIMITED]
									如果想要控制每个来源IP 仅能有一个最大的同时连线数，就指定这个项目吧！例如同一个IP 最多只能连10 条连线『 per_source = 10 』
		cps (新连线限制)			设定值：[两个数字]
									为了避免短时间内大量的连线要求导致系统出现忙碌的状态而有这个cps 的设定值。第一个数字为一秒内能够接受的最多新连线要求， 第二个数字则为，若超过第一个数字那暂时关闭该服务的秒数。
		一般设定项目：登录档的记录
		log_type (登录档类型)		设定值：[登录项目等级]
									当资料记录时，以什么登录项目记载？且需要记载的等级为何(预设为info等级)。这两个设定值得要看过下一章登录档后才会知道哩！这边你先有印象即可。
		log_on_success 
		log_on_failure (登录状态)	设定值：[PID,HOST,USERID,EXIT,DURATION]
									在『成功登入』或『失败登入』之后，需要记录的项目：PID 为纪录该server 启动时候的process ID ， HOST 为远端主机的IP、USERID 为登入者的帐号、EXIT 为离开的时候记录的项目、DURATION 为该使用者使用此服务多久？
		进阶设定项目：环境、网路埠口与连线机制等
		env (额外变数设定)			设定值：[变数名称=变数内容]
									这一个项目可以让你设定环境变量。
		port (非正规埠号)			设定值：[一组数字(小于65534)]
									这里可以设定不同的服务与对应的port ，但是请记住你的port 与服务名称必须与/etc/services 内记载的相同才行！不过，若服务名称是你自订的，那么这个port 就可以随你指定
		redirect (服务转址)			设定值：[IP port]
									将client 端对我们server 的要求，转到另一部主机上去！呵呵！这个好玩呦！例如当有人要使用你的ftp 时，你可以将他转到另一部机器上面去！那个IP_Address 就代表另一部远端主机的IP 啰！
		includedir (呼叫外部设定)	设定值：[目录名称]
									表示将某个目录底下的所有档案都给他塞进来xinetd.conf 这个设定里头！这东西有用多了， 如此一来我们可以一个一个设定不同的项目！而不需要将所有的服务都写在xinetd.conf 当中！你可以在/etc/xinetd.conf 发现这个设定呦！
		安全控管项目：
		bind (服务介面锁定)			设定值：[IP]
									这个是设定『允许使用此一服务的介面卡』的意思！举个例子来说，你的Linux 主机上面有两个IP ，而你只想要让IP1 可以使用此一服务，但IP2 不能使用此服务，这里就可以将IP1 写入即可！那么IP2 就不可以使用此一server 啰
		interface					设定值：[IP]
									与bind 相同
		only_from (防火墙机制)		设定值：[0.0.0.0, 192.168.1.0/24, hostname, domainname]
									这东西用在安全机制上面，也就是管制『只有这里面规定的IP 或者是主机名称可以登入！』如果是 0.0.0.0 表示所有的PC 皆可登入，如果是192.168.1.0/24 则表示为C class 的网域！亦即由 192.168.1.1 ~ 192.168.1.255 皆可登入！另外，也可以选择domain name ，例如 .dic.ksu.edu.tw 就可以允许昆山资传系网域的IP 登入你的主机使用该server ！
		no_access (防火墙机制)		设定值：[0.0.0.0, 192.168.1.0/24, hostname, domainname]
									跟only_from 差不多啦！就是用来管理可否进入你的Linux 主机启用你的server 服务的管理项目！no_access 表示『不可登入』的PC 啰！
		access_times (时间控管)		设定值：[00:00-12:00, HH:MM-HH:MM]
									这个项目在设定『该服务server 启动的时间』，使用的是24 小时的设定！例如你的ftp 要在 8 点到16 点开放的话，就是： 08:00-16:00。
		umask						设定值：[000, 777, 022]
									设定使用者建立目录或者是档案时候的属性！系统建议值是022 。
	5）一个简单的rsync 范例设定
		super daemon 控管的服务可以多一层管理的手续来达成类似防火墙的机制，底下我们使用rsync 这个可以进行远端镜射(mirror)的服务来说明。rsync 可以让两部主机上面的某个目录一模一样，在远端异地备援系统上面是挺好用的一个机制。而且预设一装好CentOS就已经存在！那就来瞧瞧预设的rsync 设定档！
			$ vim /etc/xinetd.d/rsync 
			service rsync   <==服务名称为rsync
			{
					disable = no                      <==预设是关闭的！刚刚被我们打开了 
					socket_type = stream          <==使用TCP的连线机制之故 
					wait = no              <==可以同时进行大量连线功能 
					user = root            <==启动服务为root这个身份 
					server = /usr/bin/rsync <==就是这支程式启动rsync的服务啰 
					server_args = --daemon        <==这是必要的选项啊！
					log_on_failure += USERID         <==登入错误时，额外记录使用者ID
			}
		能不能修改user成为其他身份呢？由于在/etc/services 当中规定rsync使用的埠口号码为873 ，这个埠口小于1024 ，所以理论上启动这个埠口的身份一定要是root 才行！这里user先别乱改！目前测试机有两个网络接口，一个是192.168.1.100 ，一个则是127.0.0.1， 假设我将192.168.1.100 设计为对外网域， 127.0. 0.1 为内部网域，且内外网域的分别权限设定为：
			对内部127.0.0.1 网域开放较多权限的部分：
				这里的设定值需绑在127.0.0.1 这个介面上；
				对127.0.0.0/8 开放登入权限；
				不进行任何连线的限制，包括总连线数量与时间；
				但是127.0.0.100 及127.0.0.200 不允许登入rsync 服务。
			对外部192.168.1.100 网域较多限制的设定：
				对外设定绑住192.168.1.100 这个介面；
				这个介面仅开放140.116.0.0/16 这个B 等级的网域及.edu.tw 网域可以登入；
				开放的时间为早上1-9 点以及晚上20-24 点两个时段；
				最多允许10 条同时连线的限制。
			127.0.0.1是内部回圈测试用的IP ，用他来设计网路是没有意义的。不过，我们这里仅是作一个设计的介绍
			这样的规划情况下，我们可以将刚刚上头的/etc/xinetd.d/rsync 这个档案修改成为：
				$ vim /etc/xinetd.d/rsync 
				#先针对对内的较为松散的限制来设定：
				service rsync
				{
						disable = no                         <==要启动才行啊！
						bind = 127.0.0.1          <==服务绑在这个介面上！
						only_from = 127.0.0.0/8        <==只开放这个网域的来源登入 
						no_access = 127.0.0.{100,200} <==限制这两个不可登入 
						instances = UNLIMITED          <==取代/etc/xinetd.conf的设定值 
						socket_type = stream             <==底下的设定则保留
						wait = no
						user = root
						server = /usr/bin/rsync
						server_args = --daemon
						log_on_failure += USERID
				}

				#再针对外部的连线来进行限制呢！
				service rsync
				{
						disable = no
						bind = 192.168.1.100
						only_from = 140.116.0.0/16
						only_from += .edu.tw            <==因为累加，所以利用+=设定 
						access_times = 01:00-9:00 20:00-23:59 <==时间有两时段，有空格隔开 
						instances = 10                 < ==只有10条连线
						socket_type = stream
						wait = no
						user = root
						server = /usr/bin/rsync
						server_args = --daemon
						log_on_failure += USERID
				}
			在上面这个设定档中,共写了两段service rsync 的设定，一段针对内部网域一段针对外部网域，如果设计完毕将他重新启动，就会出现如下的状态:
				0.先看看原本的873状态为何！
				$ netstat -tnlp | grep 873 
				tcp 0 0 0.0.0.0:873       0.0.0.0:* LISTEN 4925/xinetd
				 #仔细看，仅针对0.0.0.0这个全域网域监听而已哩！

				# 1.重新启动xinetd吧！不是启动rsync喔！别搞错。
				$ /etc/init.d/xinetd restart 
				$ netstat -tnlp | grep 873 
				tcp 0 0 192.168.1.100:873      0.0.0.0:* LISTEN 7227/xinetd
				tcp 0 0 127.0.0.1:873          0.0.0.0:* LISTEN 7227/xinetd
				 #两个网络接口啊～而且， PID会是同一个呢！
			如同上面的设定，将某个系统服务针对不同的用户端来源指定不同的使用权限！这样子系统服务可以安全多了。
	6）服务的防火墙管理xinetd, TCP Wrappers
		一般来说，系统的防火墙分析主要可以透过封包过滤或者是透过软体分析，我们的Linux 预设有提供一个软体分析的工具， 那就是/etc/hosts.deny, /etc/hosts.allow 这两个设定档！另外，如果有安装tcp wrappers 套件时， 我们甚至可以加上一些额外的追踪功能呢！
		1-/etc/hosts.allow, /etc/hosts.deny 管理
			管制at的使用可以透过修订/etc/at.{allow|deny} 来管理，至于crontab 则是使用/etc/cron.{allow|deny} 来管理的。那么有没有办法透过个什么机制，就能够管理某些程式的网路使用呢？就有点像管理某些程式是否能够接受或者是拒绝来自网际网路的连线的意思啦！有的！那就是/etc/hosts.{allow|deny} 啰。
			任何以xinetd管理的服务，都可以透过/etc/hosts.allow, /etc/hosts.deny来设定防火墙。那么什么是防火墙呢？简单的说，就是针对来源IP或网域进行允许或拒绝的设定，以决定该连线是否能够成功达成连接的一种方式就是了。其实我们刚刚修改/etc/xinetd.d/rsync里头的no_access, only_from也可以进行这方面的防火墙设定。不过，使用/etc/hosts.allow, /etc/hosts.deny则更容易集中控管，在设定与查询方面也较为方便！那么就让我们谈谈这两个档案的设定技巧吧！
			其实/etc/hosts.allow 与/etc/hosts.deny 也是/usr/sbin/tcpd 的设定档，而这个/usr/sbin/tcpd 则是用来分析进入系统的TCP 网路封包的一个软体，TCP是一种连线导向的网路连线封包，包括www, email, ftp 等等都是使用TCP 封包来达成连线的喔。所以啰，顾名思义，这个套件本身的功能就是在分析TCP 网路资料封包啦！而TCP 封包的档头主要记录了来源与目主机的IP 与port ，因此藉由分析TCP 封包并搭配/etc/hosts.{allow,deny} 的规则比对，就可以决定该连线是否能够进入我们的主机啦。所以啦，我们要使用TCP Wrappers 来控管的就是：
				来源IP 或/与整个网域的IP 网段；
				port (就是服务啦，前面有谈到启动某个埠口是daemon 的责任啊)
			基本上只要一个服务受到xinetd 管理，或者是该服务的程式支援TCP Wrappers 函式的功能时，那么该服务的防火墙方面的设定就能够以 /etc/hosts.{allow,deny} 来处理啰。换个方式来说，只要不支援TCP Wrappers 函式功能的软体程式就无法使用/etc/hosts.{allow,deny} 的设定值啦，这样说，有没有比较清楚啊。不过，那要如何得知一个服务的程式有没有支援TCP Wrappers 呢，你可以这样简单的处理喔。
				范例一：测试一下达成sshd及httpd这两个程式有无支援TCP Wrappers的功能 
					$ ldd $(which sshd httpd)
					/usr/sbin/sshd:
							libwrap.so.0 => /usr/lib64/libwrap.so.0 (0x00002abcbfaed000)
							libpam.so.0 => /lib64/libpam.so.0 (0x00002abcbfcf6000)
					....(中间省略)....
					/usr/sbin/httpd:
							libm.so.6 => /lib64/libm.so.6 (0x00002ad395843000)
							libpcre.so.0 => /lib64/libpcre.so.0 (0x00002ad395ac6000)
					....(底下省略).... 
					#重点在于软体有没有支援libwrap.so那个函式库啰
				ldd (library dependency discovery) 这个指令可以查询某个程式的动态函式库支援状态，因此透过这个ldd 我们可以轻松的就查询到sshd, httpd 有无支援tcp wrappers 所提供的libwrap.so 这个函式库档案。从上表的输出中我们可以发现， sshd 有支援但是httpd 则没有支援。因此我们知道sshd 可以使用/etc/hosts.{allow,deny} 进行类似防火墙的抵挡机制，但是httpd 则没有此项功能喔！
			设定档语法
				这两个档案的设定语法都是一样的，基本上，看起来应该像这样：
					<service(program_name)> : <IP, domain, hostname> : <action>
					<服务(亦即程式名称)> : <IP 或领域或主机名称> : < 动作>
					# 上头的< > 是不存在于设定档中！
				举例来说上面我们谈到过rsync设定档内不是有server的参数吗？rsync设定档内/usr/bin/rsync为其参数值，那么在我们这里就得要写成rsync即可喔！依据rsync的设定档资料，我们将抵挡的127.0.0.100, 127.0.0.200,及放行的140.116.0.0/16写在这里，内容有点像这样：
					$ vim /etc/hosts.deny 
					rsync : 127.0.0.100 127.0.0.200 : deny
					或者：
					$ vim /etc/hosts.deny 
					rsync : 127.0.0.100 : deny
					rsync : 127.0.0.200 : deny
			为什么要设定成 /etc/hosts.allow 及/etc/hosts.deny 两个档案呢？其实只要有一个档案存在就够了， 不过，为了设定方便起见，我们存在两个档案，其中需要注意的是：
				写在hosts.allow 当中的IP 与网段，为预设『可通行』的意思，亦即最后一个栏位allow 可以不用写；
				而写在hosts.deny 当中的IP 与网段则预设为deny ，第三栏的deny 亦可省略；
				这两个档案的判断依据是： (1) 以/etc/hosts.allow 为优先，而(2) 若分析到的IP 或网段并没有记录在/etc/hosts.allow ，则以/etc/ hosts.deny 来判断。
			也就是说， /etc/hosts.allow 的设定优先于/etc/hosts.deny 啰！基本上，只要hosts.allow 也就够了，因为我们可以将 allow 与deny 都写在同一个档案内，只是这样一来似乎显得有点杂乱无章，因此，通常我们都是：
				允许进入的写在/etc/hosts.allow 当中；
				不许进入的则写在/etc/hosts.deny 当中。
			此外，我们还可以使用一些特殊参数在第一及第二个栏位喔！内容有：
				ALL：代表全部的program_name 或者是IP 都接受的意思，例如ALL: ALL: deny
				LOCAL：代表来自本机的意思，例如： ALL: LOCAL: allow
				UNKNOWN：代表不知道的IP 或者是domain 或者是服务时；
				KNOWN：代表为可解析的IP, domain 等等资讯时；
			以rsync 为例子来说明好了，现在假设一个比较安全的流程来设定，就是：
				只允许140.116.0.0/255.255.0.0 与203.71.39.0/255.255.255.0 这两个网域，及203.71.38.123 这个主机可以进入我们的rsync 伺服器；
				此外，其他的IP 全部都挡掉！
					$ vim /etc/hosts.allow 
					rsync: 140.116.0.0/255.255.0.0
					rsync: 203.71.39.0/255.255.255.0
					rsync: 203.71.38.123
					rsync: LOCAL
					$ vim /etc/hosts.deny 
					rsync: ALL  <==利用ALL设定让所有其他来源不可登入
	7）TCP Wrappers 特殊功能
		那么有没有更安全的设定？例如，当有其他人扫瞄我的rsync port时，我就将他的IP记住，以做为未来的查询与认证之用呢？是有的！只是，那就得要有额外的动作参数加在第三栏了，而且你还需要安装了TCP Wrappers软体才行。要确定有没有安装TCP Wrappers可以使用『 rpm -q tcp_wrappers 』来查询喔。至于更加细部的主要动作则有：
			spawn (action)
			可以利用后续接的shell来进行额外的工作，且具有变数功能，主要的变数内容为： %h (hostname), %a (address), %d (daemon)等等；
			twist (action)
			立刻以后续的指令进行，且执行完后终止该次连线的要求(DENY)
		为了达成追踪来源目标的相关资讯的目的，此时我们需要safe_finger 这个指令的辅助才行。而且我们还希望用户端的这个恶意者能够被警告。整个流程可以是这样的：
			利用safe_finger 去追踪出对方主机的资讯(包括主机名称、使用者相关资讯等)；
			将该追踪到的结果以email 的方式寄给我们本机的root ；
			在对方萤幕上面显示不可登入且警告他已经被记录的讯息
			由于是抵挡的机制，因此我们这个spawn 与twist 的动作大多是写在/etc/hosts.deny 档案中的。我们将上述的动作写成类似如下：
				$ vim /etc/hosts.deny 
				rsync : ALL: spawn (echo "security notice from host $(/bin/hostname)" ;\
				echo; /usr/sbin/safe_finger @%h ) | \
				/bin/mail -s "%d-%h security" root & \
				: twist ( /bin/echo -e "\n\nWARNING connection not allowed.\n\n" )
				上面其实是针对一个rsync 所写的资讯，你可以看到上面这四行共有三个冒号来隔开，意义是：
				rsync： 指的就是rsync 这个服务的程式；
				ALL： 指的是来源，这个范围指的当然是全部的所有来源啰，因为是ALL 嘛！
				spawn (echo "security notice from host $(/bin/hostname)" ; echo ; /usr/sbin/safe_finger @%h ) | /bin/mail -s "%d-%h security" root &： 由于要将一些侦测的资料送给root 的邮件信箱，因此需要使用资料流汇整的括号( )，括号内的重点在于safe_finger 的项目，他会侦测到用户端主机的相关资讯，然后使用管线命令将这些资料送给mail处理， mail会将该资讯以标头为security 的字样寄给root！由于spawn 只是中间的过程，所以还能够有后续的动作！
				twist ( /bin/echo -e "\n\nWARNING connection not allowed.\n\n" )： 这个动作会将Warning 的字样传送到用户端主机的萤幕上！然后将该连线中断。
	8）系统开启的服务
		你已经知道了daemons的启动档案放置的目录，也知道了服务与port的对应，那么要如何查询目前系统上面已经启动了的服务呢？可以使用ps与top来找寻已经启动了的服务的程序与他的PID呢！不过，我们怎么知道该服务启动的port是哪一个？呵呵！好问题！可以直接使用 netstat这个网路状态观察指令来检查我们的port呢！甚至他也可以帮我们找到该port的程序呢(PID)！
	9）观察系统启动的服务
		观察系统已启动的服务方式很多，不过，我们最常使用netstat 来观察。基本上，以ps 来观察整个系统上面的服务是比较妥当的，因为他可以将全部的process 都找出来。不过，我们比较关心的还是在于有启动网路监听的服务， 所以会使用netstat 来查阅。
			范例一：找出目前系统开启的『网路服务』有哪些？
			$ netstat -tulp
			Active Internet connections (only servers)
			Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name
			tcp 0 0 www.vbird.tsai:2208 *:* LISTEN 4575/hpiod
			tcp 0 0 *:737 *:* LISTEN 4371/rpc.statd
			tcp 0 0 *:sunrpc *:* LISTEN 4336/portmap
			tcp 0 0 www.vbird.tsai:ipp *:* LISTEN 4606/cupsd
			tcp 0 0 www.vbird.tsai:smtp *:* LISTEN 4638/sendmail: acce
			tcp 0 0 *:ssh *:* LISTEN 4595/sshd
			udp 0 0 *:filenet-tms *:* 4755/avahi-daemon:
			....(底下省略)....
			# 看一下上头， Local Address 的地方会出现主机名称与服务名称的，要记得的是，
			# 可以加上-n 来显示port number ，而服务名称与port 对应则在/etc/services

			范例二：找出所有的有监听网路的服务(包含socket状态)： 
			$ netstat -lnp
			Active Internet connections (only servers)
			Proto Recv-Q Send-Q Local Address Foreign Address State PID/Program name
			tcp 0 0 127.0.0.1:2208 0.0.0.0:* LISTEN 4575/hpiod
			....(中间省略)....
			Active UNIX domain sockets (only servers)
			Proto RefCnt Flags Type State I-Node PID/Program name Path
			....(中间省略)....
			unix 2 [ ACC ] STREAM LISTENING 10624 4701/xfs /tmp/.font-unix/fs7100
			unix 2 [ ACC ] STREAM LISTENING 12824 5015/Xorg /tmp/.X11-unix/X0
			unix 2 [ ACC ] STREAM LISTENING 12770 4932/gdm-binary /tmp/.gdm_socket
			....(以下省略)....
			# 仔细的瞧一瞧啊，除了原有的网路监听port 之外，还会有socket 显示在上面，
			# 我们可以清楚的知道有哪些服务被启动呢！

			范例三：观察所有的服务状态 
			$ service --status-all 
		利用netstat可以取得很多跟网路有关的服务资讯，透过这个指令，我们可以轻易的了解到网路的状态， 并且可以透过PID 与kill 的相关功能，将有问题的资料给他剔除说～ 当然啦，要更详细的取得PPID 的话，才能够完全的抵挡有问题的程序！
	10）另外，除了已经存在系统当中的daemon 之外，如何在一开机就完整的启动我们所需要的服务呢？底下我们就来谈一谈chkconfig 及ntsysv！
		1）设定开机后立即启动服务的方法
			就如同上面提到的，我们使用netstat仅能观察到目前已经启动的daemon ，使用 service这个指令或者是『 /etc/init.d/* start 』的方法则仅能在目前的环境下立即启动某个服务而已。那么重新开机后呢？该服务是否还是继续的自动启动？这个时候我们就得要了解一下，到底我的Linux主机是怎么开机的呢？
				打开电脑电源，开始读取BIOS 并进行主机的自我测试；
				透过BIOS 取得第一个可开机装置，读取主要开机区(MBR) 取得开机管理程式；
				透过开机管理程式的设定，取得kernel 并载入记忆体且侦测系统硬体；
				核心主动呼叫init 程式；
				init程式开始执行系统初始化(/etc/rc.d/rc.sysinit)
				依据init 的设定进行daemon start (/etc/rc.d/rc[0-6].d/*)
				载入本机设定(/etc/rc.d/rc.local)
			关于更多开机流程的详细说明，我们会在第二十章时再来跟大家说明。由上面的流程你可以看到系统服务在开机时就可以被启动的地方是在第六个步骤，而事实上第六个步骤就是以不同的执行等级呼叫不同的服务啦！那么什么叫做执行等级呢？
			我们在启动Linux 系统时，可以进入不同的模式喔，这模式我们称为执行等级(run level)。不同的执行等级有不同的功能与服务， 目前你先知道正常的执行等级有两个，一个是具有X 视窗介面的run level 5 ，另一个则是纯文字介面的run level 3。由于预设我们是以图形介面登入系统的，因此可以想像得到的是，我们应该是在run level 5 的环境中啦！那你怎么知道run level 5 有哪些服务预设可以启动呢？这就得要使用特殊的指令来查询啊！
			1-chkconfig： 管理系统服务预设开机启动与否
				$ chkconfig --list [服务名称] 
				$ chkconfig [--level [0123456]] [服务名称] [on|off] 
				选项与参数：
				--list ：仅将目前的各项服务状态列出来
				--level：设定某个服务在该level 下启动(on) 或关闭(off)

				范例一：列出目前系统上面所有被chkconfig管理的服务 
				$chkconfig --list |more
				NetworkManager 0:off 1:off 2:off 3:off 4:off 5:off 6:off
				acpid 0:off 1:off 2:off 3:on 4:on 5:on 6:off
				....(中间省略)....
				yum-updatesd 0:off 1:off 2:on 3:on 4:on 5:on 6:off

				xinetd based services:   <==底下为super daemon所管理的服务
						chargen-dgram: off
						chargen-stream: off
				....(底下省略)....
				# 你可以发现上面的表格有分为两个区块，一个具有1, 2, 3 等数字，一个则被xinetd 
				# 管理。没错！从这里我们就能够发现服务有stand alone 与super daemon 之分。

				范例二：显示出目前在run level 3为启动的服务 
				$ chkconfig --list | grep '3:on'

				范例三：让atd这个服务在run level为3, 4, 5时启动： 
				$ chkconfig --level 345 atd on
			chkconfig 仅是设定开机时预设会启动的服务而已， 所以该服务目前的状态如何是不知道的
				范例四：先观察httpd ，再观察预设有无启动，之后以chkconfig设定为预设启动 
				$ /etc/init.d/httpd status 
				httpd已停止   <==根本就没有启动

				$ chkconfig --list httpd
				httpd 0:off 1:off 2:off 3:off 4:off 5:off 6:off
				# 原因是预设并没有启动啊！

				$ chkconfig httpd on; chkconfig --list httpd
				httpd 0:off 1:off 2:on 3:on 4:on 5:on 6:off
				# 已经设定为『开机预设启动』了，再来观察看看到底该服务启动没？

				$ /etc/init.d/httpd status
				httpd 已停止
				# 哈！竟然还是没有启动喔！怎么会这样啊？
			上面的范例四并没有启动httpd的原因很简单，我们仅是设定开机时启动而已啊！没有重新开机，使用chkconfig并不会导致该服务立即被启动！也不会让该服务立即被关闭，而是只有在开机时才会被载入或取消载入而已喔。而既然chkconfig可以设定开机是否启动，那么我们能不能用来管理super daemon的启动与关闭呢？非常好！我们就来试看看底下的案例
				范例五：查阅rsync是否启动，若要将其关闭该如何处理？
				$ /etc/init.d/rsync status
				-bash: /etc/init.d/rsync: No such file or directory
				# rsync 是super daemon 管理的，所以当然不可以使用stand alone 的启动方式来观察

				$ netstat -tlup | grep rsync
				tcp 0 0 192.168.201.110:rsync *:* LISTEN 4618/xinetd
				tcp 0 0 www.vbird.tsai:rsync *:* LISTEN 4618/xinetd

				$ chkconfig --list rsync 
				rsync on    <==预设启动呢！将它处理成预设不启动吧

				$ chkconfig rsync off; chkconfig --list rsync 
				rsync off   <==看吧！关闭了喔！现在来处理一下super daemon的东东！

				$ /etc/init.d/xinetd restart; netstat -tlup | grep rsync
				#你会发现原本rsync 不见了
			2-ntsysv： 类图形介面管理模式
				基本上， chkconfig 真的已经很好用了，不过，我们的CentOS还有提供一个更不错的， 那就是ntsysv！注意喔， chkconfig 很多的distributions 都存在，但是ntsysv 则是Red Hat 系统特有的！
				$ ntsysv [--level <levels>] 
				选项与参数：
				--level ：后面可以接不同的run level ，例如ntsysv --level 35
			3-chkconfig： 设定自己的系统服务
				chkconfig [--add|--del] [服务名称] 
				选项与参数：
				--add ：增加一个服务名称给chkconfig 来管理，该服务名称必须在/etc/init.d/ 内
				--del ：删除一个给chkconfig 管理的服务
				如果自己写了一个程式并且想要让该程式成为系统服务好让chkconfig 来管理时， 可以怎么进行呢？只要将该服务加入init 可以管理的script 当中，亦即是/etc/init.d/当中即可。举个例子，我们在/etc/init.d/里面建立一个test.sh档案，该档案仅是一个简单的服务范例，基本上，没有任何用途.... 对于该档案的必须性是这样的：
				test.sh 将在run level 3 及5 启动；
				test.sh 在/etc/rc.d/rc[35].d 当中启动时，以80 顺位启动，以70 顺位结束。
					$ vim /etc/init.d/test.sh
					#!/bin/bash
					# chkconfig: 35 80 70
					# description: 没啥！只是用来作为练习之用的一个范例
					echo "Nothing"
				基本上，比较重要的是第二行，他的语法是： 『 chkconfig: [runlevels] [启动顺位] [停止顺位] 』其中， runlevels 为不同的run level 状态，启动顺位(start number) 与结束顺位(stop number) 则是在/etc/rc.d/rc[35].d 内建立以S80myvbird 及K70myvbird 为档名的设定方式！
					$ chkconfig --list myvbird
					service myvbird supports chkconfig, but is not referenced in any 
					runlevel (run 'chkconfig --add myvbird')
					# 尚未加入chkconfig 的管理机制中！所以需要再动点手脚

					$ chkconfig --add myvbird; chkconfig --list myvbird
					myvbird 0:off 1:off 2:off 3:on 4:off 5:on 6:off
					#看吧！加入了chkconfig的管理当中了！
					#很有趣吧！如果要将这些资料都删除的话，那么就下达这样的情况：

					$ chkconfig --del myvbird 
					$ rm /etc/init.d/myvbird
				chkconfig是个不错用的工具！尤其是当你想要自己建立自己的服务时。
	11）CentOS 5.x 预设启动的服务简易说明
		随着Linux 上面软体支援性越来越多，加上自由软体蓬勃的发展，我们可以在Linux 上面用的daemons 真的越来越多了。所以，想要写完所有的daemons 介绍几乎是不可能的，可以使用ntsysv 或者是vi /etc/init.d/* 里面的档案去瞧一瞧。
	12）总结：
		Unix 的system V 版本是个很纯种的Unix版本～ 在那种年代底下，启动系统服务的管理方式被称为SysV 的init 脚本程序的处理方式！亦即系统核心第一支呼叫的程序是init ， 然后 init 去唤起所有的系统所需要的服务，不论是本地服务还是网络服务就是了。基本上 init 的管理机制有几个特色如下：
		1-服务的启动、关闭与观察等方式：
			所有的服务启动脚本通通放置于/etc/init.d/ 底下，基本上都是使用bash shell script 所写成的脚本程序，需要启动、关闭、重新启动、观察状态时， 可以透过如下的方式来处理：
				o 启动：/etc/init.d/daemon start
				o 关闭：/etc/init.d/daemon stop
				o 重新启动：/etc/init.d/daemon restart
				o 状态观察：/etc/init.d/daemon status
		2-服务启动的分类：
			init 服务的分类中，依据服务是独立启动或被一只总管程序管理而分为两大类：
				o 独立启动模式(stand alone)：服务独立启动，该服务直接常驻于内存中，提供本机或用户的服务行
				为，反应速度快。
				o 总管程序(super daemon)：由特殊的xinetd 或inetd 这两个总管程序提供socket 对应或port 对应
				的管理。当没有用户要求某socket 或port 时， 所需要的服务是不会被启动的。若有用户要求时，
				xinetd 总管才会去唤醒相对应的服务程序。当该要求结束时，这个服务也会被结束掉～ 因为透过
				xinetd 所总管，因此这个家伙就被称为super daemon。好处是可以透过super daemon 来进行服务
				的时程、联机需求等的控制，缺点是唤醒服务需要一点时间的延迟。
		3-服务的相依性问题：
			服务是可能会有相依性的～例如，你要启动网络服务，但是系统没有网络， 那怎么可能可以唤醒网络服务呢？如果你需要联机到外部取得认证服务器的联机，但该联机需要另一个A 服务的需求，问题是，A 服务没有启动， 因此，你的认证服务就不可能会成功启动的！这就是所谓的服务相依性问题。init 在管理员自己手动处理这些服务时，是没有办法协助相依服务的唤醒的！
		4-执行等级的分类：
			上面说到init是开机后核心主动呼叫的， 然后init可以根据用户自定义的执行等级(runlevel)来唤醒不同的服务，以进入不同的操作界面。基本上Linux 提供7 个执行等级，分别是0, 1, 2...6 ， 比较重要的是1)单人维护模式、3)纯文本模式、5)文字加图形界面。而各个执行等级的启动脚本是透过/etc/rc.d/rc[0-6]/SXXdaemon 连结到/etc/init.d/daemon ， 连结档名(SXXdaemon) 的功能为： S 为启动该服务，XX 是数字，为启动的顺序。由于有SXX 的设定，因此在开机时可以『依序执行』所有需要的服务，同时也能解决相依服务的问题。这点与管理员自己手动处理不太一样就是了。
		5-制定执行等级默认要启动的服务：
			若要建立如上提到的SXXdaemon 的话，不需要管理员手动建立连结档， 透过如下的指令可以来处理默认启动、预设不启动、观察预设启动否的行为：
				o 预设要启动： chkconfig daemon on
				o 预设不启动： chkconfig daemon off
				o 观察预设为启动否： chkconfig --list daemon
		6-执行等级的切换行为：
			当你要从纯文本界面(runlevel 3) 切换到图形界面(runlevel 5)， 不需要手动启动、关闭该执行等级的相关服务，只要『init 5 』即可切换，init 会主动去分析/etc/rc.d/rc[35].d/ 这两个目录内的脚本， 然后启动转换runlevel 中需要的服务～就完成整体的runlevel 切换。
		基本上 init 主要的功能都写在上头了，重要的指令包括daemon 本身自己的脚本(/etc/init.d/daemon) 、xinetd 这个特殊的总管程序(super daemon)、设定预设开机启动的chkconfig，以及会影响到执行等级的 init N 等。虽然CentOS 7 已经不使用init 来管理服务了，不过因为考虑到某些脚本没有办法直接塞入systemd 的处理，因此这些脚本还是被保留下来。所以，在以上的内容中稍微介绍了一下。
					

