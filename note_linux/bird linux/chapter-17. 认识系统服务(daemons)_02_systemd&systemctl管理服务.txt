1、systemd使用的unit分类
	从CentOS 7.x以后，Red Hat系列的distribution放弃沿用多年的System V开机启动服务的流程，即前面提到的init启动脚本的方法，改用systemd这个启动服务管理机制。
	1-平行处理所有服务，加速开机流程：
		旧的 init 启动脚本是『一项一项任务依序启动』的模式，因此不相依的服务也是得要一个一个的等待。但目前我们的硬件主机系统与操作系统几乎都支持多核心架构了， 没道理未相依的服务不能同时启动！systemd 就是可以让所有的服务同时启动，系统启动的速度变快！
	2-一经要求就响应的on-demand 启动方式：
		systemd全部就是仅有一只systemd服务搭配systemctl指令来处理，无须其他额外的指令来支持。不像systemV 还要init, chkconfig, service... 等等指令。此外， systemd 由于常驻内存，因此任何要求(on-demand)都可以立即处理后续的daemon启动的任务。
	3-服务相依性的自我检查：
		由于systemd可以自定义服务相依性的检查，因此如果B服务是架构在A服务上面启动的，在没有启动A服务的情况下仅手动启动B服务时，systemd会自动启动A服务！这样就可以免去管理员得要一项一项服务去分析的麻烦
	4-依daemon功能分类：
		systemd旗下管理的服务非常多，为了厘清所有服务的功能，因此，首先systemd 先定义所有的服务为一个服务单位(unit)，并将该unit归类到不同的服务类型(type) 去。旧的init仅分为stand alone 与super daemon，systemd 将服务单位(unit) 区分为service, socket, target, path, snapshot,timer 等多种不同的类型(type)，方便管理员的分类与记忆。
	5-将多个daemons集合成为一个群组：
		如同systemV的init 头有个runlevel的特色，systemd 亦将许多的功能集合成为一个所谓的target项目，这个项目主要在设计操作环境的建置，所以是集合了许多的daemons，即执行某个target 就是执行多个daemon！
	6-向下兼容旧有的init 服务脚本：
		基本上，systemd 是可以兼容于init的启动脚本的，因此，旧的init启动脚本也能够透过systemd来管理，只是更进阶的systemd功能就没有办法支持了。
	虽然如此，不过 systemd 也是有些地方无法完全取代init的！包括：
	1-在runlevel的对应上，大概仅有runlevel 1, 3, 5有对应到systemd的某些target类型而已，没有全部对应；
	2-全部的systemd都用systemctl这个管理程序管理，而systemctl 支持的语法有限制，不像/etc/init.d/daemon就是纯脚本可以自定义参数，systemctl不可自定义参数。；
	3-如果某个服务启动是管理员自己手动执行启动，而不是使用systemctl去启动的(例如你自己手动输入crond 以启动crond 服务)，那么systemd 将无法侦测到该服务，而无法进一步管理。
	4-systemd 启动过程中，无法与管理员透过standard input 传入讯息！因此，自行撰写systemd 的启动设定时，务必要取消互动机制～(连透过启动时传进的标准输入讯息也要避免！)
2、systemd的配置文件放置目录
	基本上，systemd 将过去所谓的daemon执行脚本通通称为一个服务单位(unit)，而每种服务单位依据功能来区分时，就分类为不同的类型(type)。基本的类型有包括系统服务、数据监听与交换的插槽档服务(socket)、储存系统状态的快照类型、提供不同类似执行等级分类的操作环境(target) 等等。这么多类型不会很麻烦，因为配置文件都放置在底下的目录中：
	1-/usr/lib/systemd/system/：每个服务最主要的启动脚本设定，有点类似以前的/etc/init.d 底下的文件；
	2-/run/systemd/system/：系统执行过程中所产生的服务脚本，这些脚本的优先序要比/usr/lib/systemd/system/ 高！
	3-/etc/systemd/system/：管理员依据主机系统的需求所建立的执行脚本，其实这个目录有点像以前/etc/rc.d/rc5.d/Sxx 之类的功能！执行优先序又比/run/systemd/system/高
	也就是说，到底系统开机会不会执行某些服务其实是看 /etc/systemd/system/ 底下的设定，所以该目录底下就是一大堆连结档。而实际执行的systemd 启动脚本配置文件， 其实都是放置在/usr/lib/systemd/system/ 底下！因此如果你想要修改某个服务启动的设定，应该要去/usr/lib/systemd/system/ 底下修改！/etc/systemd/system/ 仅是连结到正确的执行脚本配置文件而已。所以想要看执行脚本设定，应该就得要到/usr/lib/systemd/system/ 底下去查阅！
3、systemd的unit类型分类说明
	/usr/lib/systemd/system/下根据扩展名的类型， 我们大概可以找到几种比较常见的systemd的服务类型如下：
	.service
		一般服务类型 (service unit)：主要是系统服务，包括服务器本身所需要的本地服务以及网络服务都是！比较经常被使用到的服务大多是这种类型！所以，这也是最常见的类型了！
	.socket
		内部程序数据交换的插槽服务(socket unit)：主要是 IPC (Inter-process communication) 的传输讯息插槽文件 (socket file) 功能。 这种类型的服务通常在监控讯息传递的插槽文件，当有透过此插槽文件传递讯息来说要链接服务时，就依据当时的状态将该用户的要求传送到对应的daemon，若daemon尚未启动，则启动该daemon后再传送用户的要求。使用socket类型的服务一般是比较不会被用到的服务，因此在开机时通常会稍微延迟启动的时间。一般用于本地服务比较多，例如我们的图形界面很多的软件都是透过socket来进行本机程序数据交换的行为。(这与早期的xinetd 这个super daemon有部份的相似！)
	.target
		执行环境类型 (target unit)：其实是一群unit 的集合，例如上面表格中谈到的 multi-user.target 其实就是一堆服务的集合，也就是说，选择执行multi-user.target就是执行一堆其他.service 、 .socket 之类的服务！
	.mount
	.automount
		文件系统挂载相关的服务 (automount unit / mount unit)：例如来自网络的自动挂载、NFS 文件系统挂载等与文件系统相关性较高的程序管理。
	.path
		侦测特定文件或目录类型 (path unit)：某些服务需要侦测某些特定的目录来提供队列服务，例如最常见的打印服务，就是透过侦测打印队列目录来启动打印功能！ 这时就得要 .path 的服务类型支持了！
	.timer
		循环执行的服务 (timer unit)：这个东西有点类似anacrontab！不过是由systemd主动提供的，比anacrontab更加有弹性！
4、透过systemctl 管理服务
	1-透过systemctl管理单一服务(service unit)的启动/开机启动与观察状态
		一般来说，服务的启动有两个阶段，一个是『开机的时候设定要不要启动这个服务』， 以及『现在要不要启动这个服务』
		$ systemctl [command] [unit]
			command 主要有：
			start ：立刻启动后面接的unit
			stop ：立刻关闭后面接的unit
			restart ：立刻关闭后启动后面接的unit，亦即执行stop再start的意思
			reload ：不关闭后面接的unit 的情况下，重载配置文件，让设定生效
			enable ：设定下次开机时，后面接的 unit 会被启动
			disable ：设定下次开机时，后面接的 unit 不会被启动
			status ：目前后面接的这个 unit 的状态，会列出有没有正在执行、开机预设执行否、登录等信息等！
			is-active ：目前有没有正在运作中
			is-enable ：开机时有没有预设要启用这个 unit
		eg：
			$ systemctl status atd.service
				atd.service - Job spooling tools
				Loaded: loaded (/usr/lib/systemd/system/atd.service; enabled)
				Active: active (running) since Mon 2015-08-10 19:17:09 CST; 5h 42min ago
				Main PID: 1350 (atd)
				CGroup: /system.slice/atd.service
				└─1350 /usr/sbin/atd -f
				Aug 10 19:17:09 xxxxx systemd[1]: Started Job spooling tools.
				# 重点在第二、三行～
				# Loaded：这行在说明，开机的时候这个unit会不会启动，enabled 为开机启动，disabled 开机不会启动
				# Active：现在这个 unit 的状态是正在执行 (running) 或没有执行 (dead)
				# 后面几行则是说明这个 unit 程序的 PID 状态以及最后一行显示这个服务的登录文件信息！
				# 登录文件信息格式为：『时间』 『讯息发送主机』 『哪一个服务的讯息』 『实际讯息内容』
				# 所以上面的显示讯息是：这个 atd 预设开机就启动，而且现在正在运作的意思！
			$ systemctl stop atd.service
				不应该使用kill 的方式来关掉一个正常的服务！否则systemctl会无法继续监控该服务systemtctl status atd 的输出结果中，第2, 3 两行很重要～因为那是该unit 下次开机会不会预设启动，以及目前启动的状态！ 相当重要！最底下unit的登录档～如果unit曾经出错过，观察这个地方也是相当重要的。
				第三行，Active的daemon除了running 跟dead 之外，基本上有几个常见的状态：
					active (running)：
						正有一只或多只程序正在系统中执行的意思，举例来说，正在执行中的vsftpd 就是这种	模式。
					active (exited)：
						仅执行一次就正常结束的服务，目前并没有任何程序在系统中执行。举例来说，开机或者是挂载时才会进行一次的quotaon 功能，就是这种模式！ quotaon 不须一直执行～只须执行一次之后，就交给文件系统去自行处理啰！通常用bash shell 写的小型服务，大多是属于这种类型(无须常驻内存)。
					active (waiting)：
						正在执行当中，不过还再等待其他的事件才能继续处理。举例来说，打印的队列相关服务就是这种状态！虽然正在启动中，不过，也需要真的有队列进来(打印作业) 这样他才会继续唤醒打印机服务来进行下一步打印的功能。
					inactive：
						这个服务目前没有运作的意思。
				daemon 目前的状态有这么多种，那么daemon的预设状态除了enable/disable之外，还有其他的情况
					enabled：
						这个daemon 将在开机时被执行
					disabled：
						这个daemon 在开机时不会被执行
					static：
						这个daemon 不可以自己启动(enable 不可)，不过可能会被其他的enabled 的服务来唤醒(相依属性的服务)
					mask：
						这个daemon 无论如何都无法被启动！因为已经被强制注销(非删除)。可透过systemctl unmask 方式改回原本状态
	2-强迫服务注销(mask)
		eg:
			$ systemctl stop cups.service
			$ systemctl mask cups.service
			ln -s '/dev/null' '/etc/systemd/system/cups.service'
			# mask注销的动作，让启动的脚本变成空的装置而已
			$ systemctl unmask cups.service
			rm '/etc/systemd/system/cups.service'
	3-透过systemctl观察系统上所有的服务
		系统上面有多少服务存在要透过list-units及list-unit-files来观察
		$ systemctl [command] [--type=TYPE] [--all]
			command:
			list-units ：依据unit列出目前有启动的unit。若加上--all才会列出没启动的。
			list-unit-files ：依据/usr/lib/systemd/system/内的文件，将所有文件列表说明。
			--type=TYPE就是之前提到的unit type，主要有 service, socket, target等
		eg:
			$ systemctl
				UNIT 						LOAD 	ACTIVE SUB 		DESCRIPTION
				proc-sys-fs-binfmt_mis... 	loaded 	active waiting 	Arbitrary Executable File Formats File System
				.....(省略).....
				#列出系统上面有启动的 unit
				列出的项目中，主要的意义是：
				# UNIT ：项目的名称，包括各个 unit 的类别 (看扩展名)
				# LOAD ：开机时是否会被加载，默认 systemctl 显示的是有加载的项目而已喔！
				# ACTIVE ：目前的状态，须与后续的 SUB 搭配！就是我们用 systemctl status 观察时，active 的项目！
				# DESCRIPTION ：详细描述啰
				# systemctl 都不加参数，其实预设就是 list-units 的意思！
			$ systemctl list-unit-files
				UNIT FILE STATE
				proc-sys-fs-binfmt_misc.automount static
				.....(中间省略).....
				336 unit
				#使用systemctl list-unit-files 会将系统上所有的服务通通列出来,不像list-units仅以unit分类作大致的说明。至于 STATE 状态就是谈到的开机是否会加载的那个状态项目！主要有enabled/disabled/mask/static等等。
			$ systemctl list-units --type=service --all
				# 只剩下 *.service 的项目才会出现！
	4-透过systemctl 管理不同的操作环境(target unit)
		$ systemctl list-units --type=target --all
			#观察targert
		在CentOS 7.1 的预设情况下，有26 个target unit 耶！而跟操作界面相关性比较高的target主要有底下几个：
			graphical.target：
				就是文字加上图形界面，这个项目已经包含了底下的multi-user.target 项目！
			multi-user.target：
				纯文本模式！
			rescue.target：
				在无法使用root 登入的情况下，systemd 在开机时会多加一个额外的暂时系统，与你原本的系统无关。这时你可以取得root 的权限来维护你的系统。但是这是额外系统，因此可能需要动到chroot的方式来取得你原有的系统喔！后续的章节再谈！
			emergency.target：
				紧急处理系统的错误，还是需要使用root登入的情况，在无法使用rescue.target时，可以尝试使用这种模式！
			shutdown.target：
				就是关机的流程。
			getty.target：
				可以设定你需要几个tty 之类的，如果想要降低tty 的项目，可以修改这个东西的配置文件！
		正常的模式是multi-user.target 以及graphical.target 两个，救援方面的模式主要是rescue.target以及更严重的emergency.target。如果要修改可提供登入的tty 数量，则修改getty.target 项目。基本上，我们最常使用的当然就是multi-user 以及graphical！
		$ systemctl [command] [unit.target]
			选项与参数：
			command:
			get-default ：取得目前的 target
			set-default ：设定后面接的 target 成为默认的操作模式
			isolate ：切换到后面接的模式
		eg：
			$ systemctl isolate multi-user.target
				#不重新启动的情况下，将目前的操作环境改为纯文本模式，关掉图形界面
				#注意：在service部份用start/stop/restart才对，在target项目使用isolate (隔离不同的操作模式) 才对！
		在正常的切换情况下，使用上述isolate 的方式即可。不过为了方便起见， systemd提供了数个简单的指令切换操作模式之用！ 大致上如下所示：
			$ systemctl poweroff 系统关机
			$ systemctl reboot 重新启动
			$ systemctl suspend 进入暂停模式,暂停模式会将系统的状态数据保存到内存中，然后关闭掉大部分的系统硬件，当然，并没有实际关机。当用户按下唤醒机器的按钮，系统数据会重内存中回复，然后重新驱动被大部分关闭的硬件，就开始正常运作！唤醒的速度较快。
			$ systemctl hibernate 进入休眠模式，休眠模式则是将系统状态保存到硬盘当中，保存完毕后，将计算机关机。当用户尝试唤醒系统时，系统会开始正常运作， 然后将保存在硬盘中的系统状态恢复回来。因为数据是由硬盘读出，因此唤醒的效能与你的硬盘速度有关。
			$ systemctl rescue 强制进入救援模式
			$ systemctl emergency 强制进入紧急救援模式
	5-透过systemctl分析各服务之间的相依性
		$ systemctl list-dependencies [unit] [--reverse]
			选项与参数：
			--reverse ：反向追踪谁使用这个 unit 的意思！
		eg:
			列出目前的 target 环境下，用到什么特别的 unit
				$ systemctl get-default
					multi-user.target
				$ systemctl list-dependencies
			查出谁会用到 multi-user.target
				$ systemctl list-dependencies --reverse
					default.target
					└─graphical.target
			$ systemctl list-dependencies graphical.target
	6-与systemd 的daemon 运作过程相关的目录简介
		systemd 启动脚本配置文件在/usr/lib/systemd/system/,/etc/systemd/system/ 目录下，还有哪些目录跟系统的daemon运作有关？ 基本上是这样的：
			/usr/lib/systemd/system/：
				使用 CentOS 官方提供的软件安装后，默认的启动脚本配置文件都放在这里，这里的数据尽量不要修改～要修改时，请到/etc/systemd/system 底下修改较佳！
 			/run/systemd/system/：
				系统执行过程中所产生的服务脚本，这些脚本的优先序要比/usr/lib/systemd/system/ 高！
 			/etc/systemd/system/：
				管理员依据主机系统的需求所建立的执行脚本，其实这个目录有点像以前/etc/rc.d/rc5.d/Sxx 之类的功能！执行优先序又比/run/systemd/system/ 高喔！
 			/etc/sysconfig/*：
				几乎所有的服务都会将初始化的一些选项设定写入到这个目录下，举例来说，mandb 所要更新的man page索引中，需要加入的参数就写入到此目录下的man-db 当中喔！而网络的设定则写在/etc/sysconfig/network-scripts/ 这个目录内。所以，这个目录内的文件也是挺重要的；
 			/var/lib/：
				一些会产生数据的服务都会将他的数据写入到/var/lib/ 目录中。举例来说，数据库管理系统Mariadb的数据库默认就是写入/var/lib/mysql/ 这个目录下啦！
 			/run/：
				放置了好多daemon 的暂存档，包括lock file 以及PID file 等等。
		systemd里头有很多的本机会用到的socket服务，里头可能会产生很多的socket file。怎么知道这些socket file放置在哪里？
			$ systemctl list-sockets
	7-网络服务与端口口对应简介
		/etc/services
		第一栏为daemon 的名称、第二栏为该daemon所使用的端口号与网络数据封包协议，封包协议主要为可靠联机的 TCP 封包以及较快速但为非面向连接的UDP 封包。