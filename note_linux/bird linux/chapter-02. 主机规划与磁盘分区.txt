1、Linux账号和群组
	Linux 到底是如何辨别每一个使用者
	1）使用者标识符：UID与GID
		1-登入 Linux 主机时，输入的是我们的账号，但是其实Linux 主机并不会直接认识输入的账号，而是仅仅认识数字ID，账号和ID的对应在/etc/passwd文件中，例如：网上下载一个tarball类型文件，他的用户可能是一串奇怪的数字，因为passwd文件中未找到相应的账号名称
		2-使用者登录系统至少会取得两个ID：UID（User ID）、GID（Group ID）
		3-文件同样是通过他拥有UID和GID依据/etc/passwd和/etc/group中的内容来显示用户账号和组名的
	2）使用者账号
		1-我们输入账号密码后，系统操作如下步骤：
			1.先找寻/etc/passwd 里面是否有你输入的账号？如果没有则跳出，如果有的话则将该账号对应的UID与GID(在/etc/group中)读出来，另外，该账号的家目录与shell设定也一并读出
			2.再来则是核对密码表啦！这时Linux会进入/etc/shadow里面找出对应的账号与UID，然后核对一下你刚刚输入的密码与里头的密码是否相符？
			3.如果一切都OK 的话，就进入Shell 控管的阶段啰
			
			ps. 登入linux主机的时候，/etc/passwd和/etc/shadow就必须让系统读取（很多攻击者会将特殊账号写到passwd文件中），所以备份Linux的系统的账号的话，这两个文件一定要备份，这两个文件详情可以参考man 5 passwd 及 man 5 shadow
		2-/etc/passwd文件结构
			1.每一行都代表一个账号，有几行就代表有几个账号在你的系统中！ 不过需要特别留意的是，里头很多账号本来就是系统正常运作所必须要的，我们可以简称他为系统账号，例如 bin, daemon, adm, nobody等等，这些账号请不要随意的杀掉
			2.每一行通过[:]分隔为七列，分别代表：
				a-账号名称
				b-密码
					早期Unix系统的密码就是放在该字段，但是这个文件的特性是所有的程序都能够读取，很容易造成密码数据被窃取， 所以密码数据放到/etc/shadow 中了，所这里你只会看到一个[x]
				c-UID
					使用者标识符,Linux对于UID有以下几个限制：
						0(系统管理员)
							当 UID 是 0 时，代表这个账号是[系统管理员]。 所以当你要让其他的账号名称也具有root 的权限时，将该账号的 UID 改为 0 即可。这也就是说，一部系统上面的系统管理员不见得只有 root。不过，很不建议有多个账号的UID是0，容易让系统管理员混乱。
						1~999(系统账号)
							1.保留给系统使用的ID，其实除了 0 之外，其他的UID权限与特性并没有不一样。默认 1000以下的数字让给系统作为保留账号只是一个习惯。
							2.由于系统上面启动的网络服务或背景服务希望使用较小的权限去运作，因此不希望使用root的身份去执行这些服务，所以我们就得要提供这些运行中程序的拥有者账号才行。这些系统账号通常是不可登入的，所以才会有我们在第十章提到的/sbin/nologin 这个特殊的 shell 存在。
							3.根据系统账号的由来，通常这类账号又大概被区分为两种：
								1~200：由distributions自行建立的系统账号；
								201~999：若用户有系统账号需求时，可以使用的账号UID。
						1000~60000(可登入账号)
							给一般使用者用的。事实上，目前的 linux 核心(3.10.x 版)UID已经可以支持到4294967295(2^32-1)
				d-GID
					这个与/etc/group有关,其实/etc/group的观念与/etc/passwd差不多，只是他是用来规范组名与GID的对应而已
				e-用户信息说明栏
					这个字段基本上并没有什么重要用途，只是用来解释这个账号的意义而已！不过，使用finger 的功能时，这个字段可以提供很多的讯息,后面的chfn指令会来解释这里的说明。
				f-家目录
					这是用户的家目录，root的家目录在/root，所以当root 登入之后，就会立刻跑到/root目录里头。如果你有个账号的使用空间特别的大，你想要将该账号的家目录移动到其他的硬盘去，可以在这个字段进行修改，默认的用户家目录在/home/yourIDname
				g-Shell
					当用户登入系统后就会取得一个Shell来与系统的核心沟通以进行用户的操作任务。用户预设shell 会使用bash。就是在这个字段指定。这里比较需要注意的是，有一个shell 可以用来替代成让账号无法取得shell 环境的登入动作，那就是/sbin/nologin，它可以用来制作纯pop邮件账号者的数据。
		3-/etc/shadow文件结构
			1.程序的运作都与权限有关，而权限与UID/GID有关，各程序当然需要读取/etc/passwd来了解不同账号的权限。因此/etc/passwd 的权限需设定为-rw-r--r--，虽然早期的密码也有加密过，但却放置到/etc/passwd的第二个字段上，这样一来很容易被有心人士所窃取， 加密过的密码也能够透过暴力破解法去trial and error(试误)找出来。所以后来发展出将密码移动到/etc/shadow 这个文件分隔开来的技术，而且还加入很多的密码限制参数在/etc/shadow里头
			2.每一行通过[:]分隔为九列，分别代表：
				a-账号名称
				b-密码
					经过加密的密码。这样加密密码很难被破解，但是不等于不会被破解，所以此文件预设权限是-rw-------或----------，即只要root可以读写。
					另外，由于各种加密方式不一样，加密后的字段长度不相同。举例来说，以前的DES, MD5编码系统产生的密码长度就与目前惯用的SHA端些。由于固定的加密方式产生的密码长度必须一致，因此，当你让这个字段的长度改变后，该密码就会失效。很多软件透过这个功能，在此字段前加上! 或*改变密码字段长度，就会让密码暂时失效。
				c-最近更动密码的日期
					这个字段记录更改密码的日期，不过，这个字段是计算Linux日期的时间是以1970年1月1日作为1 而累加的日期，想要知道某个日期的累积日数， 可使用如下的程序计算：
						echo $(($(date --date="2018/08/15" +%s)/86400+1))
				d-密码不可被更动的天数
					这个账号的密码在最近一次被更改后需要经过几天才可以再被变更。如果是0的话，表示密码随时可以更动的意思。这的限制是为了防止某些人一改再改密码。提示“You must wait longer to change your password”
				e-密码需要重新变更的天数
					为强制要求用户变更密码，这个字段可以指定在最近一次更改密码后,在多少天数内需要再次的变更密码才行。必须要在这个天数内重新设定密码，否则这个账号的密码将会变为过期状态。而如果像99999(计算为273年)的话，那就表示，密码的变更没有强制性之意。
				f-密码需要变更期限前的警告天数(与第5字段相比)
					当账号的密码有效期限快要到的时候(第5字段)，系统会依据这个字段的设定，提示“Warning: your password will expire in * days”
				g-密码过期后的账号宽限时间(密码失效日)(与第5字段相比)
					密码有效日期为更新日期(第3字段)+新变更日期(第5 字段)，过了该期限后用户依旧没有更新密码，那该密码就算过期了。虽然密码过期但是该账号还是可以用来进行其他工作的，包括登入系统取得bash。不过如果密码过期了，当你登入系统时，系统会强制要求你必须要重新设定密码才能登入继续使用，这就是密码过期。提示“You are required to change your password immediately (password aged)”
					在密码过期几天后，如果使用者还是没有登入更改密码，那么这个账号的密码将会失效，亦即该账号再也无法使用该密码登入
				h-账号失效日期
					这个日期跟第三个字段一样，都是使用1970年以来的总日数设定。这个字段表示： 这个账号在此字段规定的日期之后，将无法再使用。就是所谓的账号失效,此时不论你的密码是否有过期，这个账号都不能再被使用，提示“Your account has expired; please contact your system administrator”。这个字段会被使用通常应该是在收费服务的系统中，规定一个日期让该账号不能再使用
				i-保留字段
			3.密码忘记了怎么办？
				一般用户
					这个最容易解决，请系统管理员帮忙，重新设定好你的密码而不需要知道旧密码，利用root 的身份使用passwd指令来处理即可。
				root用户
				    因为无法使用root身份登入，但root的密码在/etc/shadow当中，因此可以使用各种可行的方法开机进入Linux再去修改。
					例如：
						1=重新启动进入单人维护模式(第十九章)后，系统会主动的给予root权限的bash接口，此时再以passwd修改密码即可；
						2=或以Live CD开机后挂载根目录去修改/etc/shadow，将里面的root的密码字段清空，再重新启动后root将不用密码即可登入。登入后再赶快以passwd指令去设定root密码即可
			4.获取密码加密方式
				authconfig --test | grep hashing
	3）关于群组：有效与初始群组和groups, newgrp
		1-/etc/group文件结构

